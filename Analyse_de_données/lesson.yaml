- Class: meta
  Course: Initiation à R
  Lesson: Analyse de données
  Author: Elias Bouacida
  Type: Standard
  Organization: Université Paris 8
  Version: 2.4.5

- Class: text
  Output: "Dans cette partie nous allons (enfin) travailler sur des vraies 
    données, et utiliser un jeu de données présent dans l'extension `questionr`. 
    Nous devons donc avant toute chose installer cette extension."


- Class: cmd_question
  Output: "Pour installer cette librairie, saisissez directement
    la commande suivante dans la console install.packages('questionr').
    Tout un tas de messages devraient s'afficher dans la console. 
    Attendez que l'invite de commandes `>` apparaisse à nouveau."
  CorrectAnswer: install.packages("questionr")
  AnswerTests: omnitest(correctExpr='install.packages("questionr")')
  Hint: Tapez install.packages("questionr") dans la console.

- Class: text
  Output: "Le jeu de données que nous allons utiliser est un extrait de l'enquête 
    *Histoire de vie* réalisée par l'INSEE en 2003.
    Il contient 2000 individus et 20 variables."


- Class: cmd_question
  Output: Pour pouvoir utiliser ces données, il faut d'abord charger l'extension `questionr` (après l'avoir installée, bien entendu).
    Tapez la commande library(questionr) pour ce faire.
  CorrectAnswer: library(questionr)
  AnswerTests: omnitest(correctExpr='library(questionr)')
  Hint: Tapez la commande library(questionr) dans la console.


- Class: cmd_question
  Output: Nous devons ensuite indiquer à R que nous souhaitons accéder au jeu de données à l'aide de la fonction data.
    Tapez la commande data(hdv2003).
  CorrectAnswer: data(hdv2003)
  AnswerTests: omnitest(correctExpr='data(hdv2003)')
  Hint: Tapez la commande data(hdv2003) dans la console.

- Class: text
  Output: Cette commande ne renvoie aucun résultat particulier (sauf en cas d'erreur), 
    mais vous devriez voir apparaître dans l'onglet *Environment* de RStudio un 
    nouvel objet nommé `hdv2003`.
    Cet objet est d'un type nouveau, il s'agit d'un tableau de données, en anglais,
    un data.frame.
    Un data.frame (ou tableau de données, ou table) est un type d'objet R qui
    contient des données au format tabulaire, avec les observations en ligne et 
    les variables en colonnes, comme dans une feuille de tableur de type LibreOffice ou Excel.

- Class: cmd_question
  Output: Un *data frame* peut être manipulé comme les autres objets vus précédemment. 
    On peut par exemple l'assigner à l'objet d.
    Montrez moi comment vous faites pour assigner la base de donnée hdv2003 à l'objet d.
  CorrectAnswer: d <- hdv2003
  AnswerTests: omnitest(correctExpr='d <- hdv2003')
  Hint: Rappelez vous que l'opérateur d'assignation dans R est la flèche vers la gauche <-.

- Class: cmd_question
  Output: Un tableau étant un objet comme un autre, on peut lui appliquer des fonctions. 
    Par exemple, nrow() retourne le nombre de lignes du tableau.
    Essayez de l'utiliser.
  CorrectAnswer: nrow(d)
  AnswerTests: omnitest(correctExpr='nrow(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: cmd_question
  Output: ncol() retourne le nombre de colonnes du tableau.
    Essayez de l'utiliser.
  CorrectAnswer: ncol(d)
  AnswerTests: omnitest(correctExpr='ncol(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: cmd_question
  Output: Enfin, dim() retourne le nombre de lignes et de colonnes du tableau.
    Essayez de l'utiliser.
  CorrectAnswer: dim(d)
  AnswerTests: omnitest(correctExpr='dim(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: cmd_question
  Output: La fonction names() retourne les noms des colonnes du tableau, c'est-à-dire la liste de nos variables.
    Essayez de l'utiliser.
  CorrectAnswer: names(d)
  AnswerTests: omnitest(correctExpr='names(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: cmd_question
  Output: Enfin, la fonction str() renvoie un descriptif plus détaillé de la structure du tableau.
    Elle liste les différentes variables, indique leur type et affiche leur premières valeurs.
    Essayez de l'utiliser.
  CorrectAnswer: str(d)
  AnswerTests: omnitest(correctExpr='str(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: text
  Output: À noter que sous RStudio, on peut afficher à tout moment la structure d'un objet en cliquant sur l'icône de triangle sur fond bleu à gauche du nom de l'objet dans l'onglet *Environment*.



- Class: text
  Output: R va afficher l'ensemble des valeurs de la variable `sexe` dans la console, ce qui est peu utile. 
    Cela nous permet de constater que `d$sexe` est un vecteur de chaînes de caractères tels qu'on en a déjà rencontré précédemment.
    La commande `table$colonne` renvoie donc la colonne nommée `colonne` du tableau `table`, c'est-à-dire un vecteur, en général de nombres ou de chaînes de caractères.

- Class: cmd_question
  Output: Si on souhaite afficher seulement les premières ou dernières valeurs d'une variable, on peut utiliser les fonctions `head` et `tail`.
    Essayez d'afficher lez premières valeurs de la variable age à l'aide de la fonction head.
  CorrectAnswer: head(d$age)
  AnswerTests: omnitest(correctExpr='head(d$age)')
  Hint: Comment obtient-ton les valeurs de la variables age ? Comment utilise-t-on une fonction ?

- Class: cmd_question
  Output: Si on souhaite afficher un nombre précis de valeurs, on précise un deuxième argument
    aux fonction head ou tail, qui indiquera ce nombre de valeurs.
    Par exemple, tail(d$age, 10) donnera les 10 dernières valeurs de la variable age.
    Essayez pour voir.
  CorrectAnswer: tail(d$age, 10)
  AnswerTests: omnitest(correctExpr='tail(d$age, 10)')
  Hint: Tapez tail(d$age, 10) dans la console.

- Class: cmd_question
  Output: On peut aussi utiliser l'opérateur `$` pour créer une nouvelle variable dans notre tableau. 
    Pour cela, il suffit de lui assigner une valeur.
    Par exemple, la variable `heures.tv` contient le nombre d'heures passées quotidiennement devant la télé.
    On peut vouloir créer une nouvelle variable dans notre tableau qui contienne la même durée convertie en minutes. 
    On va donc créer une nouvelle variables `minutes.tv`.
    Pour cela, on assignera à d$minutes.tv la variable d$heures.tv *60.
    Essayez pour voir si vous avez compris.
  CorrectAnswer: d$minutes.tv <- d$heures.tv * 60
  AnswerTests: any_of_exprs('d$minutes.tv <- d$heures.tv * 60', 'd$minutes.tv <- 60 * d$heures.tv')
  Hint: Tapez d$minutes.tv <- d$heures.tv * 60 dans la console.

- Class: cmd_question
  Output: On peut alors constater, soit visuellement soit dans la console, qu'une nouvelle variable (une nouvelle colonne) a bien été ajoutée au tableau.
    Tapez la commande pour visualiser la colonne minutes.tv dans le tableau d.
  CorrectAnswer: d$minutes.tv
  AnswerTests: omnitest(correctExpr='d$minutes.tv')
  Hint: Rappelez-vous comment on peut afficher une variable dans la console.

- Class: text
  Output: "On a donc désormais accès à un tableau de données `d`, dont les lignes sont des observations (des individus enquêtés), et les colonnes des variables (des caractéristiques de chacun de ces individus), et on sait accéder à ces variables grâce à l'opérateur `$`.
    Si on souhaite analyser ces variables, les méthodes et fonctions utilisées seront différentes selon qu'il s'agit d'une variable *quantitative* (variable numérique pouvant prendre un grand nombre de valeurs : l'âge, le revenu, un pourcentage...) ou d'une variable *qualitative* (variable pouvant prendre un nombre limité de valeurs appelées modalités : le sexe, la profession, le dernier diplôme obtenu, etc.)."


- Class: cmd_question
  Output: Caractériser une variable quantitative, c'est essayer de décrire la manière dont ses valeurs se répartissent, ou se distribuent.
    Pour cela on peut commencer par regarder les valeurs extrêmes, avec les fonctions `min`, `max` ou `range`.
    Quelle est la valeur minimale de l'âge dans le tableau ?
    Tapez la commande nécessaire pour l'obtenir.
  CorrectAnswer: min(d$age)
  AnswerTests: omnitest(correctExpr='min(d$age)')
  Hint: La fonction pour obtenir le minimum d'une variable est min().

- Class: cmd_question
  Output: Maintenant, quelle est la valeur maximale de l'âge dans le tableau ?
    Tapez la commande nécessaire pour l'obtenir.
  CorrectAnswer: max(d$age)
  AnswerTests: omnitest(correctExpr='max(d$age)')
  Hint: Si vous avez su faire la précédente, celle-ci devrait être  simple.

- Class: cmd_question
  Output: La fonction range permet d'obtenir à la fois la valeur minimale et la valeur maximale d'une variable avec une seule fonction.
    Tapez la commande nécessaire pour obtenir et le minimum et le maximum de la variable age dans le tableau.
  CorrectAnswer: range(d$age)
  AnswerTests: omnitest(correctExpr='range(d$age)')
  Hint: Tapez range(d$age) pour obtenir le résultat demandé.

- Class: cmd_question
  Output: On peut aussi calculer des indicateurs de *centralité*. 
    Ceux-ci indiquent autour de quel nombre se répartissent les valeurs de la variable. 
    Il y en a plusieurs, le plus connu étant la moyenne, qu'on peut calculer avec la fonction `mean`.
    Faites le calcul de la moyenne de l'âge.
  CorrectAnswer: mean(d$age)
  AnswerTests: omnitest(correctExpr='mean(d$age)')
  Hint: Tapez mean(d$age) pour obtenir la moyenne des âges.

- Class: cmd_question
  Output: Il existe aussi la médiane, qui est la valeur qui sépare notre population en deux.
    On a la moitié de nos observations en-dessous, et la moitié au-dessus.
    Elle se calcule avec la fonction `median`.
    Calculez la médiane de l'âge.
  CorrectAnswer: median(d$age)
  AnswerTests: omnitest(correctExpr='median(d$age)')
  Hint: La fonction est median. Comment applique-t-on une fonction à une variable ?

- Class: cmd_question
  Output: Les indicateurs de dispersion permettent de mesurer si les valeurs sont plutôt regroupées ou au contraire plutôt dispersées.
    L'indicateur le plus simple est l'étendue de la distribution, qui décrit l'écart maximal observé entre les observations.
    On le calcule en faisant la différence entre la valeur maximale est la valeur minimale.
    Tapez la commande qui vous permet de faire cela pour la variable age.
    En faisant en sorte que la différence soit positive.
  CorrectAnswer: max(d$age) - min(d$age)
  AnswerTests: omnitest(correctExpr='max(d$age) - min(d$age)')
  Hint: Tapez la commande max(d$age) - min(d$age) pour obtenir le résultat demandé.

- Class: cmd_question
  Output: Les indicateurs de dispersion les plus utilisés sont la variance ou, de manière équivalente, l'écart-type (qui est égal à la racine carrée de la variance).
    On obtient la première avec la fonction `var`, et le second avec `sd` (abbréviation de *standard deviation*).
    Calculez la variance de la variable age.
  CorrectAnswer: var(d$age)
  AnswerTests: omnitest(correctExpr='var(d$age)')
  Hint: Tapez la commande var(d$age) pour obtenir le résultat demandé.

- Class: cmd_question
  Output: Et maintenant, tapez la commande qui permet d'obtenir l'écart-type.
  CorrectAnswer: sd(d$age)
  AnswerTests: omnitest(correctExpr='sd(d$age)')
  Hint: Il faut remplacer var dans la commande précédente par la fonction qui calcule l'écart-type.

- Class: text
  Output: Plus la variance ou l'écart-type sont élevés, plus les valeurs sont dispersées autour de la moyenne. À l'inverse, plus ils sont faibles et plus les valeurs sont regroupées.
    Une autre manière de mesurer la dispersion est de calculer les quartiles.
    Le premier quartile est la valeur pour laquelle on a 25% des observations en dessous et 75% au dessus.
    Le deuxième quartile est la valeur pour laquelle on a 50% des observations en dessous et 50% au dessus (c'est donc la médiane).
    Le troisième quartile est la valeur pour laquelle on a 75% des observations en dessous et 25% au dessus.

- Class: cmd_question
  Output: On peut les calculer avec la fonction `quantile`.
    Calculez le premier quartile de la variable age en tapant la commande quantile(d$age, prob = 0.25).
  CorrectAnswer: quantile(d$age, prob = 0.25)
  AnswerTests: omnitest(correctExpr='quantile(d$age, prob = 0.25)')
  Hint: Tapez quantile(d$age, prob = 0.25) dans la console.

- Class: cmd_question
  Output: Calculez maintenant le troisième quartile.

  CorrectAnswer: quantile(d$age, prob = 0.75)
  AnswerTests: omnitest(correctExpr='quantile(d$age, prob = 0.75)')
  Hint: L'argument `prob` donne la probabilité correspondant au quartile.
    Le troisième quartile correspond à une probabilité de 75%.

- Class: cmd_question
  Output: Notons enfin que la fonction `summary` permet d'obtenir d'un seul coup plusieurs indicateurs classiques.
    Utilisez-là sur la variable age.
  CorrectAnswer: summary(d$age)
  AnswerTests: omnitest(correctExpr='summary(d$age)')
  Hint: Tapez summary(d$age) dans la console pour obtenir le résultat demandé.

- Class: text
  Output: Nous avons vu comment trouver quelques caractéristiques d'une variable quantitative.
    Maintenant, nous allons nous tourner vers les variables *qualitatives*.
    Une variable qualitative est une variable qui ne peut prendre qu'un nombre limité de valeurs, appelées modalités.
    Dans notre jeu de données on trouvera par exemple le sexe (`sexe`), le niveau d'études (`nivetud`), la catégorie socio-professionnelle (`qualif`)...

- Class: text
  Output: À noter qu'une variable qualitative peut tout-à-fait être numérique, et que certaines variables peuvent être traitées soit comme quantitatives, soit comme qualitatives.
    C'est le cas par exemple du nombre d'enfants ou du nombre de frères et soeurs.

- Class: cmd_question
  Output: L'outil le plus utilisé pour représenter la répartition des valeurs d'une variable qualitative est le *tri à plat*.
    Il s'agit simplement de compter, pour chacune des valeurs possibles de la variable (pour chacune des modalités), le nombre d'observations ayant cette valeur. 
    Un tri à plat s'obtient sous R à l'aide de la fonction `table`.
    Regardez la variable sexe.
    Pour cela, tapez table(d$sexe).
  CorrectAnswer: table(d$sexe)
  AnswerTests: omnitest(correctExpr='table(d$sexe)')
  Hint: Tapez table(d$sexe) dans la console.

- Class: text
  Output: Ce tableau nous indique donc que parmi nos enquêtés on trouve 899 hommes et 1101 femmes.

- Class: cmd_question
  Output: Un tableau de ce type peut être affiché ou stocké dans un objet, et on peut à son tour lui appliquer des fonctions.
    Stockez le tableau obtenur à l'aide de table de la variable qualif dans l'objet tab.
  CorrectAnswer: tab <- table(d$qualif)
  AnswerTests: omnitest(correctExpr='tab <- table(d$qualif)')
  Hint: Tapez dans la console tab <- table(d$qualif)

- Class: cmd_question
  Output: Par exemple, la fonction `sort` permet de trier le tableau selon la valeur de l'effectif.
    Appliquez la fonction sort au tableau obtenu précédemment.
  CorrectAnswer: sort(tab)
  AnswerTests: omnitest(correctExpr='sort(tab)')
  Hint: Tapez dans la console sort(tab)

- Class: text
  Output: Attention, par défaut la fonction `table` n'affiche pas les valeurs manquantes (`NA`).
    Si on souhaite les inclure il faut utiliser l'argument `useNA = "always"`, soit, dans l'exemple précédent, taper `table(d$qualif, useNA = "always")`.

- Class: cmd_question
  Output: À noter qu'on peut aussi appliquer `summary` à une variable qualitative.
    Le résultat est également le tri à plat de la variable, avec en plus le nombre de valeurs manquantes éventuelles.
    Essayez pour la variable qualif
  CorrectAnswer: summary(d$qualif)
  AnswerTests: omnitest(correctExpr='summary(d$qualif)')
  Hint: Tapez summary(d$qualif) dans la console.
  
- Class: mult_question
  Output: Souhaitez-vous soumettre votre progression sur Moodle à votre 
    enseignant (cela ne fonctionnera que pour les étudiants de l'université 
    Paris 8) ?
    Si vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
    fichier 'Analyses_donnees.txt' qui a été créé plus tard.
  AnswerChoices: Oui;Non
  CorrectAnswer: "Oui"
  AnswerTests: submit_log()
  Hint: Cela soumettra votre avancée dans le cours.
  
