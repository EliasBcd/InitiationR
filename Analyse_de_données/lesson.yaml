- Class: meta
  Course: Initiation à R
  Lesson: Analyse de données
  Author: Elias Bouacida
  Type: Standard
  Organization: Université Paris 8
  Version: 2.4.5

- Class: text
  Output: "Dans cette partie nous allons (enfin) travailler sur des vraies 
    données, et utiliser un jeu de données présent dans l'extension `questionr`. 
    Nous devons donc avant toute chose installer cette extension."


- Class: cmd_question
  Output: "Pour installer cette librairie, saisissez directement
    la commande suivante dans la console install.packages('questionr').
    Tout un tas de messages devraient s'afficher dans la console. 
    Attendez que l'invite de commandes `>` apparaisse à nouveau."
  CorrectAnswer: install.packages("questionr")
  AnswerTests: omnitest(correctExpr='install.packages("questionr")')
  Hint: Tapez install.packages("questionr") dans la console.

- Class: text
  Output: "Le jeu de données que nous allons utiliser est un extrait de l'enquête 
    *Histoire de vie* réalisée par l'INSEE en 2003.
    Il contient 2000 individus et 20 variables."


- Class: cmd_question
  Output: Pour pouvoir utiliser ces données, il faut d'abord charger l'extension `questionr` (après l'avoir installée, bien entendu).
    Tapez la commande library(questionr) pour ce faire.
  CorrectAnswer: library(questionr)
  AnswerTests: omnitest(correctExpr='library(questionr)')
  Hint: Tapez la commande library(questionr) dans la console.


- Class: cmd_question
  Output: Nous devons ensuite indiquer à R que nous souhaitons accéder au jeu de données à l'aide de la fonction data.
    Tapez la commande data(hdv2003).
  CorrectAnswer: data(hdv2003)
  AnswerTests: omnitest(correctExpr='data(hdv2003)')
  Hint: Tapez la commande data(hdv2003) dans la console.

- Class: text
  Output: Cette commande ne renvoie aucun résultat particulier (sauf en cas d'erreur), 
    mais vous devriez voir apparaître dans l'onglet *Environment* de RStudio un 
    nouvel objet nommé `hdv2003`.
    Cet objet est d'un type nouveau, il s'agit d'un tableau de données, en anglais,
    un data.frame.
    Un *data frame* (ou tableau de données, ou table) est un type d'objet R qui
    contient des données au format tabulaire, avec les observations en ligne et 
    les variables en colonnes, comme dans une feuille de tableur de type LibreOffice ou Excel.

- Class: cmd_question
  Output: Un *data frame* peut être manipulé comme les autres objets vus précédemment. 
    On peut par exemple l'assigner à l'objet d.
    Montrez moi comment vous faites pour assigner la base de donnée hdv2003 à l'objet d.
  CorrectAnswer: d <- hdv2003
  AnswerTests: omnitest(correctExpr='d <- hdv2003')
  Hint: Rappelez vous que l'opérateur d'assignation dans R est la flèche vers la gauche <-.

- Class: cmd_question
  Output: Un tableau étant un objet comme un autre, on peut lui appliquer des fonctions. 
    Par exemple, nrow() retourne le nombre de lignes du tableau.
    Essayez de l'utiliser.
  CorrectAnswer: nrow(d)
  AnswerTests: omnitest(correctExpr='nrow(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: cmd_question
  Output: ncol() retourne le nombre de colonnes du tableau.
    Essayez de l'utiliser.
  CorrectAnswer: ncol(d)
  AnswerTests: omnitest(correctExpr='ncol(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: cmd_question
  Output: Enfin, dim() retourne le nombre de lignes et de colonnes du tableau.
    Essayez de l'utiliser.
  CorrectAnswer: dim(d)
  AnswerTests: omnitest(correctExpr='dim(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: cmd_question
  Output: La fonction names() retourne les noms des colonnes du tableau, c'est-à-dire la liste de nos variables.
    Essayez de l'utiliser.
  CorrectAnswer: names(d)
  AnswerTests: omnitest(correctExpr='names(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: cmd_question
  Output: Enfin, la fonction str() renvoie un descriptif plus détaillé de la structure du tableau.
    Elle liste les différentes variables, indique leur type et affiche leur premières valeurs.
    Essayez de l'utiliser.
  CorrectAnswer: str(d)
  AnswerTests: omnitest(correctExpr='str(d)')
  Hint: Comment utilise-t-on une fonction ? N'oubliez pas les parenthèses.

- Class: text
  Output: À noter que sous RStudio, on peut afficher à tout moment la structure d'un objet en cliquant sur l'icône de triangle sur fond bleu à gauche du nom de l'objet dans l'onglet *Environment*.



- Class: text
  Output: R va afficher l'ensemble des valeurs de la variable `sexe` dans la console, ce qui est peu utile. 
    Cela nous permet de constater que `d$sexe` est un vecteur de chaînes de caractères tels qu'on en a déjà rencontré précédemment.
    La commande `table$colonne` renvoie donc la colonne nommée `colonne` du tableau `table`, c'est-à-dire un vecteur, en général de nombres ou de chaînes de caractères.

- Class: cmd_question
  Output: Si on souhaite afficher seulement les premières ou dernières valeurs d'une variable, on peut utiliser les fonctions `head` et `tail`.
    Essayez d'afficher lez premières valeurs de la variable age à l'aide de la fonction head.
  CorrectAnswer: head(d$age)
  AnswerTests: omnitest(correctExpr='head(d$age)')
  Hint: Comment obtient-ton les valeurs de la variables age ? Comment utilise-t-on une fonction ?

- Class: cmd_question
  Output: Si on souhaite afficher un nombre précis de valeurs, on précise un deuxième argument
    aux fonction head ou tail, qui indiquera ce nombre de valeurs.
    Par exemple, tail(d$age, 10) donnera les 10 dernières valeurs de la variable age.
    Essayez pour voir.
  CorrectAnswer: tail(d$age, 10)
  AnswerTests: omnitest(correctExpr='tail(d$age, 10)')
  Hint: Tapez tail(d$age, 10) dans la console.
