- Class: meta
  Course: Initiation à R
  Lesson: Première manipulations de R
  Author: Elias Bouacida
  Type: Standard
  Organization: Université Paris 8
  Version: 2.4.5
  
- Class: text
  Output: Bienvenue à votre première leçon de R.
    Nous allons apprendre à manipuler R.
    La console affiche un texte de bienvenue suivi d'une ligne commençant par 
    le caractère `>` (l'invite de commande)

- Class: text
  Output: Si vous souhaitez obtenir plus d'information sur un sujet en 
    particulier en lien avec R, vous pouvez taper help.start() dans l'invite de
    commande. 
    Cela ouvrira un menu avec des informations (soit dans votre navigateur par
    défaut, soit dans Rstudio, suivant votre installation).
    Évidemment, vous trouverez aussi des réponses à vos
    questions en faisant une recherche sur internet ou en demandant à des chatbot.
    Attention néanmoins, les réponses de ceux-ci ne sont pas toujours fiables.

- Class: cmd_question
  Output: L'utilisation la plus basique de R est comme une calculatrice 
    interactive.
    Nous pouvons tout de suite essayer quelques calculs. Tapez 2 + 2 et tapez
    entrée.
  CorrectAnswer: 2 + 2
  AnswerTests: omnitest(correctExpr='2 + 2')
  Hint: Pensez à une calculatrice.

- Class: cmd_question
  Output: Nous avons vu une addition, essayons une soustraction. Tapez 5 - 7.
  CorrectAnswer: 5 - 7
  AnswerTests: omnitest(correctExpr='5-7')
  Hint: Pensez à une calculatrice.

- Class: cmd_question
  Output: Une multiplication. Tapez 4 * 12.
  CorrectAnswer:  4 * 12
  AnswerTests: omnitest(correctExpr='4 * 12')
  Hint: Pensez à une calculatrice.

- Class: cmd_question
  Output: Une division. Tapez -10/3.
  CorrectAnswer:  -10/3
  AnswerTests: omnitest(correctExpr='-10/3')
  Hint: Pensez à une calculatrice.

- Class: cmd_question
  Output: Des puissances. Tapez 5^2.
  CorrectAnswer:  5^2
  AnswerTests: omnitest(correctExpr='5^2')
  Hint: Pensez à une calculatrice.
  
- Class: text
  Output: "Enfin, il peut arriver qu’on saisisse une commande de manière 
    incomplète : oubli d’une parenthèse, faute de frappe, etc.
    Dans ce cas, R remplace l’invite de commande habituel par un signe +."

- Class: text
  Output: "Je ne peux pas vous montrer d'exemple ici, mais sachez que dans ce cas 
    vous avez deux possibilités : compléter la commande ou bien appuyer sur
    la touche Echap."

- Class: text
  Output: "Nous allons maintenant parler des objets.
    Faire des calculs, c'est bien, mais pouvoir stocker les résultats quelque part
    pour les réutiliser ultérieurement, c'est mieux !
    Pour ce faire, on peut stocker le résultat à l'aide de l'opérateur d'assignation
    `<-`.
    Cette flèche stocke ce qu'il y a à sa droite dans un objet dont le nom est
    indiqué à gauche."
    
- Class: text
  Output: Nous commençons ainsi la partie 'langage de programmation de R'.
    Une possilibité très importante dans tout langage de programmation est la 
    possibilité d'assigner une valeur à un objet (=une variable).
    Cela permet de la sauvegarder pour plus tard.
    Nous pouvons ensuite faire des opérations sur cet objet.

- Class: cmd_question
  Output: Commençons simplement.
    Nous cherchons à assigner à l'objet x la valeur 2.
    L'opérateur d'assignation dans R est la flèche vers la gauche <-.
    Elle symbolise ce qu'elle fait, on assigne à ce qui est à gauche ce qui est 
    à droite.
    Pour assigner 2 à x, il suffit de taper x <- 2.
  CorrectAnswer: x <- 2
  AnswerTests: omnitest(correctExpr='x <- 2')
  Hint: Tapez x <- 2. Il est important d'avoir un espace à gauche
    et à droite de l'opérateur d'assignation, mais NE mettez PAS d'espace entre
    le `<` et le `-` qui forment la flèche.

- Class: cmd_question
  Output: Remarquez que R n'a rien affiché, contrairement aux commandes précédentes,
    où R affichait systématiquement le résultat de la commande. 
    Pour visualiser le contenu d'un objet, il suffit de le taper, suivi 
    d'entrée.
    Essayez maintenant de visualiser x.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Taper simplement x dans la console, suivi d'entrée.
  
- Class: text
  Output: En résumé, qu'à fait R ?
    R a sauvegardé le résultat de l'opération dans l'objet x.
    Il faut taper l'objet seul pour afficher sa valeur.

- Class: text
  Output: Une remarque importante.
    Il est possible d'utiliser = comme opérateur d'assignation (x = 2 fonctionne
    exactement comme x <- 2) mais c'est généralement considéré comme une 
    mauvaise pratique, pour une raison qui vous apparaîtra plus tard.
    Enfin, Rstudio offre un raccourci pour taper <-. 
    C'est généralement  alt gauche + -, mais cela dépend des systèmes d'exploitation.
    Je vous encourage à l'utiliser dès maintenant.

- Class: cmd_question
  Output: On peut utiliser les objets dans d'autres opérations.
    R utilisera alors la valeur de l'objet pour faire l'opération demandée.
    Essayez d'additionner 4 à x.
  CorrectAnswer: x+4
  AnswerTests: any_of_exprs('x + 4', '4+x')
  Hint: Tapez x + 4 et appuyez sur entrée. 
    Utiliser x+4 ou x + 4 est une histoire de préférence, mais c'est 
    une bonne habitude de laisser un espace de chaque côté de l'opérateur 
    d'assignation.



- Class: cmd_question
  Output: On peut créer autant d'objet qu'on le souhaite. 
    Créons un objet y qui prend la valeur 5
  CorrectAnswer: y <- 5
  AnswerTests: omnitest(correctExpr='y <- 5')
  Hint: Tapez y <- 5. Il est important d'avoir un espace à gauche
    et à droite de l'opérateur d'assignation, mais NE mettez PAS d'espace entre
    le `<` et le `-` qui forment la flèche.    


- Class: cmd_question
  Output: On peut faire des opérations sur les objets exactement comme on le 
    ferait sur des valeurs, et assigner le résultat.
    Essayez d'additionner x et y et de stocker le résultat dans un objet, que
    vous nommerez somme.
  CorrectAnswer: somme <- x + y
  AnswerTests: any_of_exprs('somme <- x + y', 'somme <- y + x')
  Hint: Tapez somme <- x + y et appuyez sur entrée. 

- Class: cmd_question
  Output: Quelle est la valeur du résultat ? Tapez somme pour le savoir !
  CorrectAnswer: 'somme'
  AnswerTests: omnitest(correctExpr='somme')
  Hint: Tapez somme et appuyez sur Entrée.

- Class: text
  Output: R a fait l'addition sur les objets comme il l'aurait fait sur les
    valeurs.

- Class: text
  Output: Remarquez que le résultat de l'opération ne s'affiche pas dans la 
    première commande.
    Quand on utilise l'opérateur d'assignation, R suppose que l'on souhaite
    utiliser le résultat par la suite, pas qu'il nous intéresse immédiatement.
    Pour lui, la partie importante de l'instruction n'est pas x + y, mais 
    l'assignation du résultat à l'objet resultat.  

  
- Class: cmd_question
  Output: Si on assigne plusieurs  valeurs l'une après l'autre à un unique objet,
    seule la dernière assignation est prise en compte.
    Si maintenant vous tapez x <- 8.
  CorrectAnswer: x <- 8
  AnswerTests: omnitest(correctExpr='x <- 8')
  Hint: Tapez x <- 8
  
- Class: mult_question
  Output: Quelle est la valeur de x (sélectionner la bonne réponse en utilisant le numéro correspondant, 1 ou 2) ?
  AnswerChoices: 8; 2
  CorrectAnswer: 8
  AnswerTests: omnitest(correctVal='8')
  Hint: Si ce n'est l'un, c'est l'autre !
  
- Class: text
  Output: R écrase la valeur assigné à l'objet x et ne conserve que la dernière
    valeur assignée.

- Class: cmd_question
  Output: Assigner un objet à un autre copie simplement la valeur donnée au 
    premier objet dans le second.
    Essayez d'assigner y à x.
  CorrectAnswer: x <- y
  AnswerTests: omnitest(correctExpr='x <- y')
  Hint: Tapez x <- y.
  
- Class: cmd_question
  Output: Regardez maintenant la valeur de x.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Tapez x.

- Class: text
  Output: x a pris la valeur de y !

- Class: text
  Output: Plusieurs remarques sur les noms d'objets.
    La casse est importante, y et Y sont deux objets différents.
    Un nom d'objet ne peut pas commencer par un chiffre, mais peut en contenir.
    2 n'est pas un nom d'objet, pas plus que 2x, mais x et x2, en revanche, le 
    sont.
    Les caractères spéciaux ne marchent généralement pas dans les noms d'objets,
    en dehors de _ et -.
    deux_poids est un nom d'objet admissible, mais pas deux%poids, par exemple."    
    
- Class: cmd_question
  Output: "On le verra, les objets peuvent contenir tout un tas d’informations.
    Jusqu’ici on n’a stocké que des nombres, mais ils peuvent aussi contenir des
    chaînes de caractères (du texte), qu’on délimite avec des guillemets 
    simples ou doubles (' ou \"). Tapez : chien <- \"Chihuahua\"" 
  CorrectAnswer: chien <- "Chihuahua"
  AnswerTests: omnitest(correctExpr='chien <- "Chihuahua"')
  Hint: "Tapez : chien <- \"Chihuahua\"" 


- Class: cmd_question
  Output: Imaginons qu'on ait demandé la taille en centimètres de 3 personnes et
    qu'on souhaite calculer leur taille moyenne.
    On pourrait créer autant d'objets que de tailles et calculer la moyenne.
    Commençons par assigner 156 à taille1.
  CorrectAnswer: taille1 <- 156
  AnswerTests: omnitest(correctExpr = 'taille1 <- 156')
  Hint: Tapez taille1 <- 156
  
- Class: cmd_question
  Output: Puis 164 à taille2.
  CorrectAnswer: taille2 <- 164
  AnswerTests: omnitest(correctExpr = 'taille2 <- 164')
  Hint: Tapez taille2 <- 164
  
- Class: cmd_question
  Output: Puis 197 à taille3.
  CorrectAnswer: taille3 <- 197
  AnswerTests: omnitest(correctExp = 'taille3 <- 197')
  Hint: Tapez taille3 <- 197

- Class: cmd_question
  Output: Nous pouvons alors calculer la moyenne en divisant la somme de ces 
    3 tailles par 3. 
    Essayez.
  CorrectAnswer: (taille1 + taille2 + taille3) / 3
  AnswerTests: calculates_same_value('(taille1 + taille2 + taille3) / 3')
  Hint: "N'oubliez pas les parenthèses ! Tapez (taille1 + taille2 + taille3) / 3"
  
- Class: text
  Output: Ce n'est guère pratique !
    R a un type dédié qui facilite grandement ces calculs, les vecteurs.
    C'est une collection de valeurs (des nombres). 
    Tout objet dans R qui contient une donnée est appelé une structure de donnée.
    Les vecteurs numériques sont les structures de données les plus simple.
    En fait, même un nombre seul est considéré comme un vecteur de longueur 1.

- Class: cmd_question
  Output: La façon la plus simple de créer un vecteur est d'utiliser la commande
    c(), qui signifie 'concatenate' ou 'combine' (assembler en anglais).
    Pour créer un vecteur contenant les tailles précédentes, tapez 
    c(156, 164, 197).
    Essayez et stockez le résultat (=assigner) dans l'objet tailles.
  CorrectAnswer: tailles <- c(156, 164, 197)
  AnswerTests: omnitest(correctExpr =  'tailles <- c(156, 164, 197)')
  Hint: Tapez tailles <- c(156, 164, 197) et appuyez sur entrée.
    Cela assigne le vecteur (156, 164, 197) au nouvel objet tailles. 
    Les espaces après la virgule ne sont pas nécessaire mais rendent le code plus
    lisible.    
    
- Class: cmd_question
  Output: Tapez tailles pour voir son contenu.
    Remarquez qu'il y n'y a pas de virgules qui séparent les valeurs dans
    l'affichage.
  CorrectAnswer: tailles
  AnswerTests: omnitest(correctExpr='tailles')
  Hint: Tapez tailles et appuyez sur Entrée pour voir son contenu.
  
- Class: cmd_question
  Output: L’avantage d’un vecteur est que lorsqu’on lui applique une opération,
    celle-ci s’applique à toutes les valeurs qu’il contient.
    Ainsi, si on veut la taille en mètres plutôt qu’en centimètres, on peut
    diviser tailles par 100 et assigner le résultat à l'objet tailles_m.
    Essayez pour voir.
  CorrectAnswer: tailles_m <- tailles / 100
  AnswerTests: omnitest(correctExpr='tailles_m <- tailles / 100')
  Hint: Tapez tailles_m <- tailles / 100.
  

  
- Class: mult_question
  Output: Avant de voir l'objet tailles_m, que pensez-vous qu'il contient ?
  CorrectAnswer: un vecteur de longueur 3
  AnswerChoices: un vecteur de longueur 3 ; un nombre (= un vecteur de longueur 1) ;
    un vecteur de longueur 0 (= un vecteur vide)
  AnswerTests: omnitest(correctVal='un vecteur de longueur 3')
  Hint: R procèce aux opérations sur les vecteurs éléments par éléments.

- Class: cmd_question
  Output: Affichez maintenant le résultat.
  CorrectAnswer: tailles_m
  AnswerTests: omnitest(correctExpr='tailles_m')
  Hint: Il faut taper le nom d'un objet pour afficher sa valeur.
 
- Class: text
  Output: Comment vous l'avez probablement deviné, R a d'abord divisé `tailles` par 
    100, puis a stocke le résultat dans `tailles_m`.
    On obtient ainsi un vecteur de même longueur que le vecteur d'origine `tailles`.
    
- Class: cmd_question
  Output: Cela fonctionne pour toutes les opérations de base.
    Vous pouvez par exemple ajouter 10 à tailles.
    Essayez de deviner comment faire.
  CorrectAnswer: tailles + 10
  AnswerTests: omnitest(correctExpr='tailles + 10')
  Hint: Quelle opération permet d'additionner des nombres ?
    
- Class: cmd_question
  Output: Vous pouvez aussi essayer de mettre les tailles au carré.
    Essayez de deviner comment faire.
  CorrectAnswer: tailles^2
  AnswerTests: omnitest(correctExpr='tailles^2')
  Hint: Quelle opération permet de mettre au carré un nombre ?  
  
- Class: cmd_question
  Output: Imaginons maintenant qu’on ait aussi demandé aux trois mêmes personnes 
    leur poids en kilos. On peut créer un deuxième vecteur poids.
    Tapez poids <- c(45, 59, 110).
  CorrectAnswer: poids <- c(45, 59, 110)
  AnswerTests: omnitest(correctExpr='poids <- c(45, 59, 110)')
  Hint: Tapez poids <- c(45, 59, 110)

- Class: cmd_question
  Output: On peut alors effectuer des calculs utilisant nos deux vecteurs 
    `tailles` et `poids`.
    Calculons maintenant l'imc de chacun. 
    Créez une nouvelle variable imc qui prend les valeurs des poids en 
    kilogramme divisés  par la taille au carré.
    N'oubliez pas que la taille doit être en mètre !
  CorrectAnswer: imc <- poids / (tailles_m)^2
  AnswerTests: any_of_exprs('imc <-  poids / (tailles/100)^2', 'imc <- poids / tailles_m^2')
  Hint: Tapez imc <-  poids / tailles_m^2
    
- Class: mult_question
  Output: Quelle affirmation est vraie ?
  CorrectAnswer: Le premier élément d'imc est égal au premier élément de poids
    divisé par le carré du premier élément de tailles_m, etc.
  AnswerChoices: Le premier élément d'imc est égal au premier élément de poids
    divisé par le carré du premier élément de tailles_m, etc.; imc est un
    nombre unique; imc n'est pas défini
  AnswerTests: omnitest(correctVal="Le premier élément d'imc est égal au premier élément de poids
    divisé par le carré du premier élément de tailles_m, etc.")
  Hint: Comment R fait des opérations sur les vecteurs ?

- Class: cmd_question
  Output: Regardons le contenu d'imc.
  CorrectAnswer: imc
  AnswerTests: omnitest(correctExpr='imc')
  Hint: Tapez `imc` puis appuyez sur entrée pour voir le résultat.    
  
- Class: cmd_question
  Output: Un vecteur peut contenir des nombres, mais il peut aussi contenir du
    texte. 
    Imaginons qu’on ait demandé aux trois mêmes personnes leur niveau de diplôme.
    On peut regrouper l’information dans un vecteur de chaînes de caractères.
    Une chaîne de caractère contient du texte libre, délimité par des guillemets
    simples ou doubles.
    Tapez diplome <- c("CAP", "Bac", "Bac+2").
  CorrectAnswer: diplome <- c("CAP", "Bac", "Bac+2")
  AnswerTests: omnitest(correctExpr='diplome <- c("CAP", "Bac", "Bac+2")')
  Hint: diplome <- c("CAP", "Bac", "Bac+2").
    
- Class: cmd_question
  Output: Regardons le contenu de diplome.
  CorrectAnswer: diplome
  AnswerTests: omnitest(correctExpr='diplome')
  Hint: Tapez `diplome` puis appuyez sur entrée pour voir le résultat.   


- Class: text
  Output: Rappelez-vous néanmoins que les valeurs contenues dans un vecteur sont
    forcément du même type. 
    Si vous entrez par exemple des nombres et des chaînes de caractères dans un 
    vecteur, R convertira les nombres en chaînes de caractère. 

- Class: cmd_question
  Output: "L’opérateur :, lui, permet de générer rapidement un vecteur 
    comprenant tous les nombres entre deux valeurs, opération assez courante 
    sous R.
    Pour générer tous les nombres compris entre 1 et 10, la syntaxe sous R est
    d'écrire 1:10. Essayez pour voir."
  CorrectAnswer: 1:10
  AnswerTests: omnitest(correctExpr='1:10')
  Hint: Tapez 1:10 puis appuyez sur entrée pour voir le résultat. 


- Class: cmd_question
  Output: "Enfin, notons qu’on peut accéder à un élément particulier d’un
    vecteur en faisant suivre le nom du vecteur de crochets contenant le numéro
    de l’élément désiré.
    Pour observer le 2 élément de diplome, par exemple, il faut écrire diplome[2].
    Essayez pour voir."
  CorrectAnswer: diplome[2]
  AnswerTests: omnitest(correctExpr='diplome[2]')
  Hint: Tapez diplome[2] puis appuyez sur entrée pour afficher le deuxième 
    élément du vecteur diplome.

- Class: text
  Output: Cette opération, qui utilise l’opérateur [], permet donc la sélection 
    d’éléments d’un vecteur.
    
- Class: mult_question
  Output: Voyons voir si vous avez compris. 
    Que faut-il taper dans la console pour afficher le troisième élément du
    vecteur tailles ?
  CorrectAnswer: tailles[3]
  AnswerChoices: tailles[3]; tailles[2]; tailles[fin]
  AnswerTests: omnitest(correctVal="tailles[3]")
  Hint: R numérote les éléments à partir de 1. 

- Class: cmd_question
  Output: Dernière remarque, si on affiche dans la console un vecteur avec
    beaucoup d’éléments, ceux-ci seront répartis sur plusieurs lignes. 
    Essayez d'afficher le vecteur 1:100.
  CorrectAnswer: 1:100
  AnswerTests: omnitest(correctExpr="1:100")
  Hint: Tapez 1:100 dans la console.  

- Class: text
  Output: On remarque que R ajoute systématiquement un nombre entre crochets au 
    début de chaque ligne.
    Il s’agit en fait de la position du premier élément de la ligne dans le
    vecteur.
    Ceci explique le [1] qu’on obtient quand on affiche un simple nombre.
    C'est en fait le premier élément d'un vecteur.


- Class: mult_question
  Output: Souhaitez-vous soumettre votre progression sur Moodle à votre 
    enseignant (cela ne fonctionnera que pour les étudiants de l'université 
    Paris 8) ?
    Si vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
    fichier 'Manipulations_simples.txt' qui a été créé plus tard.
  AnswerChoices: Oui;Non
  CorrectAnswer: "Oui"
  AnswerTests: submit_log()
  Hint: Cela soumettra votre avancée dans le cours.
