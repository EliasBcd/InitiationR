- Class: meta
  Course: Initiation à R
  Lesson: Logique
  Author: Elias Bouacida
  Type: Standard
  Organization: Université Paris 8
  Version: 2.4.5

- Class: text
  Output: Cette leçon introduit les opérateurs et opérations logiques dans R.
  
- Class: text
  Output: Comme nous l'avons déjà vu, il y a deux valeurs logiques dans R, aussi
    appelé valeurs booléennes, TRUE et FALSE. 
    Dans R, il est possible de créer des expressions logiques dont le résultat
    sera TRUE ou FALSE.

- Class: cmd_question
  Output: La création d'expressions logiques nécessite des opérateurs logiques.
    Nous avons déjà vu les opérateurs arithmétiques tel que `+`, `-`, `*` et `/`.
    Le premier opérateur logique à connaître est l'égalité, représenté par deux
    signes égalités `==`.
    Essayez d'utiliser cet opérateur pour trouver si TRUE et TRUE sont égaux.
  CorrectAnswer: TRUE == TRUE
  AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Hint: Utilisez l'opérateur d'égalité et tapez TRUE == TRUE.

- Class: text
  Output: Tout comme les expressions arithmétiques, les expressions logiques
    peuvent être regroupées à l'aide de parenthèses et indiquer ainsi les priorités
    de calcul.
    Par exemple, le résultat de l'expression (TRUE == TRUE) == TRUE sera bien
    TRUE.

- Class: cmd_question
  Output: Testons cette propriété, essayez d'évaluer (FALSE == TRUE) == FALSE .
  CorrectAnswer: (FALSE == TRUE) == FALSE
  AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Hint: Tapez (FALSE == TRUE) == FALSE

- Class: cmd_question
  Output: L'opérateur d'égalité peut aussi servir à comparer des nombres.
    Utilisez-le pour savoir si 6 et 7 sont égaux.
  CorrectAnswer: 6 == 7
  AnswerTests:  any_of_exprs('6 == 7', '7 == 6')
  Hint: Utilisez l'opérateur d'égalité et tapez 6 == 7.

- Class: text
  Output: Le résultat de l'expression précédente est FALSE, parce 6 est plus
    petit que 7.
    Heureusement pour nous, nous pouvons aussi tester les inégalités pour savoir
    si un nombre est plus petit ou plus grand qu'un autre.

- Class: cmd_question
  Output: L'opérateur plus petit que `<` teste si le nombre à gauche de
    l'opérateur est plus petit que le nombre à droite.
    Tapez une expression pour tester si 6 et plus petit que 7.
  CorrectAnswer: 6 < 7
  AnswerTests: omnitest(correctExpr='6 < 7')
  Hint: Utilisez l'opérateur 'plus petit que' et tapez 6 < 7.

- Class: cmd_question
  Output: Il existe aussi un opérateur plus petit ou égal à `<=` qui teste si
    l'expression à gauche est plus petite ou égale à l'expression à droite.
    Essayez de voir si 10 est plus petit ou égal à 10.
  CorrectAnswer: 10 <= 10
  AnswerTests: omnitest(correctExpr='10 <= 10')
  Hint: Utilisez l'opérateur `<=` et tapez 10 <= 10.

- Class: text
  Output: On peut aussi utiliser les opérateurs plus grand que `>` et plus
    grand ou égal à `>=`.


- Class: mult_question
  Output: Voyons si vous avez compris.
    Laquelle des expressions suivantes à pour résultat FALSE ?
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 7; 6 < 8; 0 > -36
  AnswerTests: omnitest(correctVal='9 >= 10')
  Hint: Vous pouvez, si vous en avez besoin, essayez chaque expression dans R
    pour trouver le bon résultat.

- Class: mult_question
  Output: Et maintenant, laquelle des expressions suivantes à pour résultat
    TRUE ?
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 9; 57 < 8; -6 > -7
  AnswerTests: omnitest(correctVal='-6 > -7')
  Hint: Vous pouvez, si vous en avez besoin, essayez chaque expression dans R
    pour trouver le bon résultat.

- Class: cmd_question
  Output: Intéressons maintenant à l'opérateur 'différent de' (= non-égal)
    représenté par `!=`.
    Différent de teste si deux valeurs sont différentes, de telle sorte que le résultat
    de TRUE != FALSE est TRUE.
    Tout comme l'opérateur égalité, l'opérateur différent de s'utilise aussi avec
    des nombres.
    Essayez d'écrire une expression pour savoir si 5 est différent de 7.
  CorrectAnswer: 5 != 7
  AnswerTests:  any_of_exprs('5 != 7', '7 != 5')
  Hint: Utilisez l'opérateur différent de est tapez 5 != 7.

- Class: cmd_question
  Output: "Il peut être utile de 'négativer' une expression avec l'opérateur NON.
    Un point d'exclamation `!` inversera les évaluations de TRUE et FALSE, de
    telle sorte que la valeur de !TRUE (lire : non TRUE) est FALSE et que la
    valeur de !FALSE (lire : non FALSE) est TRUE.
    Essayez d'utiliser l'opéraeur NON pour trouver l'inverse de 5 est égal à 7."
  CorrectAnswer: '!5 == 7'
  AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)', '!7 == 5', '!(7 == 5)')
  Hint: Cette question est peut-être un peu difficile, pensez à la négation de
    l'expression 5 == 7 (vous avez seulement besoin d'un point d'exclamation
    devant).

- Class: text
  Output: Récapitulons.
    L'opérateur égal `==` teste si deux valeurs sont égales.
    L'opérateur différent de `!=` teste si deux valeurs sont différentes.
    L'opérateur NON `!` négative une expression logique de telle manière que
    TRUE devient FALSE et FALSE devient TRUE.

- Class: mult_question
  Output: Laquelle des expressions suivante est FALSE ?
  CorrectAnswer: "!(0 >= -1)"
  AnswerChoices: "!(0 >= -1); !FALSE; 7 != 8; 9 < 10"
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Hint: Vous pouvez, si vous en avez besoin, essayez chaque expression dans R
    pour trouver le bon résultat.

- Class: mult_question
  Output: "Quel est à votre avis le résultat de l'expression suivante :
    (TRUE != FALSE) == !(6 == 7)"
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Y a-t-il une vérité objective dans la programmation ?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: Essayez d'évaluer les expressions indépendamment pour trouver le résultat.

- Class: text
  Output: Il est parfois nécessaire d'examiner les relations entre plusieurs
    expressions logiques.
    On utilise pour cela les opérateurs ET (AND) et OU (OR).

- Class: cmd_question
  Output: Regardons comment l'opérateur ET fonctionne.
    Il y a deux opérateurs ET dans R, `&` et `&&`.
    Les deux opérateurs sont similaires.
    Si les expressions à droite et à gauche de l'opérateur ET ont toutes les
    deux pour résultat TRUE, alors l'expression entière a pour résultat TRUE,
    sinon le résultat est FALSE.
    Par exemple, la valeur de TRUE & TRUE est TRUE.
    Essayez avec FALSE & FALSE.
  CorrectAnswer: FALSE & FALSE
  AnswerTests: omnitest(correctExpr='FALSE & FALSE')
  Hint: Tapez simplement FALSE & FALSE

- Class: cmd_question
  Output: Vous pouvez utilisez l'opérateur `&` pour évaluer ET suivant un vecteur.
    La version `&&` a besoin d'avoir une seule valeur logique à gauche et à
    droite pour fonctionner.
    Essayons les deux.
    Commencez par TRUE & c(TRUE, FALSE, FALSE).
  CorrectAnswer: "TRUE & c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Hint: Utilisons `&` avec un vecteur, tapez TRUE & c(TRUE, FALSE, FALSE)

- Class: text
  Output: L'expression de gauche est recyclée (rappelez-vous la leçon sur les
    vecteurs) afin d'avoir la même longueur que le vecteur de droite.
    C'est comme si on avait écrit  c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE).
    Une expression comme cela  fonctionnera différemment avec l'opérateur `&&`, R
    bloquant le recyclage du vecteur de gauche (et renvoit une alerte depuis la
    version 4.2.0).

- Class: cmd_question
  Output: Utilisons la même opération en remplaçant `&` par `&&`.
  CorrectAnswer: "TRUE && c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE && c(TRUE, FALSE, FALSE)')
  Hint: Tapez TRUE && c(TRUE, FALSE, FALSE).

- Class: text
  Output: R nous renvoit un Warning et le résultat !
    Un message commençant par Warning est une façon de communiquer pour R.
    R vous communique que l'opération que vous êtes en train de faire est
    possible (il vous donne un résultat), mais qu'elle lui semble suspecte.
    En fait, ici R utilise uniquement le premier élément du vecteur de droite.
    Ce comportement est amené à disparaître dans les futures versions de R, je
    ne vous encourage donc pas à l'utiliser.
    Le principal intérêt de l'opérateur `&&` est de vous garantir que le résultat
    a une longueur de 1.
    Cela nous servira dans la suite du cours.

- Class: text
  Output: L'opérateur OU fonctionne d'une manière similaire.
    `|` recycle les vecteurs si besoin, alors que `||` renvoit un résultat de
    longueur 1.

- Class: text
  Output: OU renvoit TRUE si l'expression de droite ou l'expression de gauche
    est TRUE.
    Il renvoit FALSE sinon.

- Class: cmd_question
  Output: "Testons la version vectorielle de OU. Tapez la commande
  TRUE | c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE | c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Hint: "Tapez la commande TRUE | c(TRUE, FALSE, FALSE)."

- Class: text
  Output: Les opérateurs logiques peuvent être chainés, tout comme les
    opérations arithmétiques.
    Les expressions `6 != 10 && FALSE && 1 >= 2` ou `TRUE || 5 < 9.3
    || FALSE` sont tout à fait normales.

- Class: cmd_question
  Output: Les opérations arithmétiques ont un ordre de priorité.
    Il en est de même pour les expressions logiques.
    Tous les opérateurs ET sont évalués avant les opérateurs OU.
    Essayez cet exemple un peu ambigu 5 > 8 || 6 != 8 && 4 > 3.9.
  CorrectAnswer: "5 > 8 || 6 != 8 && 4 > 3.9"
  AnswerTests: omnitest(correctExpr='5 > 8 || 6 != 8 && 4 > 3.9')
  Hint: Regardez l'ordre des opérations OU et ET en tapant
    5 > 8 || 6 != 8 && 4 > 3.9

- Class: text
  Output: Regardons l'ordre des opérations dans cet exemple.
    ET est prioritaire sur OU.
    On commence donc par évaluer les expressions à gauche et à droite de &&.
    6 est bien différent de 8, donc le résultat à gauche est TRUE.
    4 est bien plus grand que 3.9, donc le résultat à droite est aussi TRUE.
    Le résultat de TRUE && TRUE est TRUE.
    On peut maintenant regarder ce qui se passe autour de ||.
    À droite, on a TRUE, à gauche, 5 n'est pas plus grand que 8, donc le résultat
    est FALSE.
    FALSE || TRUE a pour résultat TRUE, ce qui nous donne bien le résultat final.

- Class: mult_question
  Output: Quelle expression a pour résultat TRUE ?
  CorrectAnswer: "TRUE && FALSE || 9 >= 4 && 3 < 6"
  AnswerChoices: "TRUE && FALSE || 9 >= 4 && 3 < 6; TRUE && 62 < 62 && 44 >= 44;
    99.99 > 100 || 45 < 7.3 || 4 != 4.0; FALSE || TRUE && FALSE"
  AnswerTests: omnitest(correctVal='TRUE && FALSE || 9 >= 4 && 3 < 6')
  Hint: Si vous ne trouvez pas la réponse, essayez chaque expression pour en lire
    le résultat.

- Class: mult_question
  Output: Quelle expression a pour résultat FALSE ?
  CorrectAnswer: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5"
  AnswerChoices: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5;
    FALSE || TRUE && 6 != 4 || 9 > 4; !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79;
    6 >= -9 && !(6 > 7) && !(!TRUE)"
  AnswerTests: omnitest(correctVal='FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5')
  Hint: Si vous ne trouvez pas la réponse, essayez chaque expression pour en lire
    le résultat.
    
# - Class: text
#   Output: Vous êtes maintenant familiarisés avec les opérateurs primaires
#     dans R.
#     Voyons maintenant quelques commandes utiles supplémentaires.
# 
# - Class : cmd_question
#   Output: La commande isTRUE() a un argument.
#     Si le résultat de cet argument est TRUE, le résultat de la commande est TRUE.
#     Sinon, le resultat sera FALSE.
#     Essayez la commande en tapant isTRUE(6 > 4).
#   CorrectAnswer: "isTRUE(6 > 4)"
#   AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
#   Hint: Essayez isTRUE() en tapant isTRUE(6 > 4)
#   
# - Class: mult_question
#   Output: Quelle expression a pour résultat TRUE ?
#   CorrectAnswer: "!isTRUE(4 < 3)"
#   AnswerChoices: "isTRUE(!TRUE); isTRUE(3); !isTRUE(4 < 3); !isTRUE(8 != 5)"
#   AnswerTests: omnitest(correctVal='!isTRUE(4 < 3)')
#   Hint: isTRUE() a pour résultat TRUE uniquement si l'expression passée comme
#     argument a pour résultat TRUE.
#     
# - Class : cmd_question
#   Output: La fonction identical() a pour résultat TRUE si les deux objets R
#     passés en argument sont identiques.
#     Essayez la fonction identical en tapant identical('twins', 'twins')
#   CorrectAnswer: "identical('twins', 'twins')"
#   AnswerTests: omnitest(correctExpr="identical('twins', 'twins')")
#   Hint: Ignorez pour l'instant ce que peuvent représenter 'twins'.
#     Tapez identical('twins', 'twins')
# 
# - Class: mult_question
#   Output: Quelle expression a pour résultat TRUE ?
#   CorrectAnswer: "identical(5 > 4, 3 < 3.1)"
#   AnswerChoices: "identical(5 > 4, 3 < 3.1); identical(4, 3.1); identical('hello', 'Hello'); !identical(7, 7)"
#   AnswerTests: omnitest(correctVal='identical(5 > 4, 3 < 3.1)')
#   Hint: Le résultat d'identical() est TRUE uniquement si les deux arguments sont
#     identiques.
# 
# - Class : cmd_question
#   Output: Une autre commande utile est xor() (OU exclusif).
#     Elle prend deux arguments et retourne TRUE si et un seul des deux arguments
#     a est TRUE (et l'autre est FALSE), dans les autres cas, le résultat sera
#     FALSE.
#     Essayez la commande xor() en tapant xor(5 == 6, !FALSE)
#   CorrectAnswer: "xor(5 == 6, !FALSE)"
#   AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
#   Hint: Tapez xor(5 == 6, !FALSE).
# 
# - Class: text
#   Output: Le résultat de 5==6 est FALSE, et !FALSE est TRUE.
#     Le résultat de xor(FALSE, TRUE) est donc TRUE.
#     En revanche, si le premier argument était changé en 5==5, xor(TRUE, TRUE)
#     est FALSE.
# 
# - Class: mult_question
#   Output: Quelle expression a pour résultat FALSE ?
#   CorrectAnswer: "xor(4 >= 9, 8 != 8.0)"
#   AnswerChoices: "xor(4 >= 9, 8 != 8.0); xor(!isTRUE(TRUE), 6 > -1);
#     xor(identical(xor, 'xor'), 7 == 7.0); xor(!!TRUE, !!FALSE)"
#   AnswerTests: omnitest(correctVal='xor(4 >= 9, 8 != 8.0)')
#   Hint: Pour que le résultat de xor() soit FALSE, il faut que les deux arguments
#    ait la même valeur logique (deux TRUE ou deux FALSE).
# 
# - Class: cmd_question
#   Output: Petite question surprise.
#     À votre avis, quelle est le résultat de TRUE & c(0, 45, -2) ?
#     Essayez.
#   CorrectAnswer: TRUE & c(0, 45, -2)
#   AnswerTests: omnitest(correctVal='TRUE & c(0, 45, -2)')
#   Hint: Tapez TRUE & c(0, 45, -2) et regardez bien le résultat.
# 
# - Class: text
#   Output: "Surprenant n'est-ce pas ?
#     On pourrait s'attendre à ce que R nous renvoit une erreur.
#     Ce n'est pas le cas !
#     Il est bon de savoir que quand R évalue des expressions logiques,
#     il convertit les nombres en TRUE et FALSE, suivant le règle suivante :
#     0 est FALSE, tout les autres nombres sont TRUE."
    
- Class: text
  Output: C'est la fin de l'introduction à l'évaluation des expressions logiques
    dans R.
    
- Class: mult_question
  Output: Souhaitez-vous soumettre votre progression sur Moodle à votre 
    enseignant (cela ne fonctionnera que pour les étudiants de l'université 
    Paris 8) ?
    Si vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
    fichier 'Logique.txt' qui a été créé plus tard.
  AnswerChoices: Oui;Non
  CorrectAnswer: "Oui"
  AnswerTests: submit_log()
  Hint: Cela soumettra votre avancée dans le cours.
