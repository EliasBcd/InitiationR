- Class: meta
  Course: Initiation à R
  Lesson: Scripts et fonctions
  Author: Elias Bouacida
  Type: Standard
  Organization: Université Paris 8
  Version: 2.4.5
  
    
- Class: text
  Output: Dans la question suivante, je vais vous demander de modifier un script, 
    comme au tout début de cette leçon.
    Quand vous aurez fini de modifier le script, n'oubliez pas de sauvegarder
    votre script puis de taper submit() pour faire évaluer votre réponse.
    Il y aura des commentaires dans le script, lisez-les attentivement !
    
- Class: script
  Output: "La dernière expression évaluée dans une fonction est la valeur retournée par la fonction, le résultat de la fonction.
    Nous voulons que cette fonction prenne un argument, x, et de nous renvoyer comme résultat cet argument non modifié.
    Effacez le # dans le script pour  faire en sorte que l'argument soit renvoyé tel que.
    N'oubliez pas de sauvegardez et tapez sur submit()."
  AnswerTests: test_func1()
  Hint: "N'oubliez pas d'enlever le signe # de commentaire et de ne laisser que x sur la ligne."
  Script: boring_function.R

- Class: cmd_question
  Output: "Maintenant que vous avez créer votre première fonction, essayons-la !
    Tapez boring_function('Hello World!').
    Si votre fonction fonctionne correctement, vous devriez voir apparaître comme résultat 'Hello World!'" 
  CorrectAnswer: "boring_function('Hello World!')"
  AnswerTests: omnitest(correctExpr="boring_function('Hello World!')")
  Hint: "Essayez la fonction boring_function en tapant: boring_function('Hello World!')"
  
- Class: text
  Output: Félicitations ! Vous avez écrit votre première fonction.
    Les fonctions sont un élément clé de R avec les objets.
    Pour comprendre le fonctionnement de R, deux choses sont importantes.
    Premièrement, tout ce qui existe est un objet.
    Deuxièmement, tout ce qui se produit est une fonction.
    (Citation de John Chambers, un des créateur de R).
  
- Class: cmd_question
  Output: Si vous voulez connaître le code de calcul d'une fonction, tapez son 
    nom sans parenthèses ni arguments.
    Essayez pour la fonction boring_function.
  CorrectAnswer: boring_function
  AnswerTests: omnitest(correctExpr='boring_function')
  Hint: Afin d'afficher le code source de la fonction tapez boring_function.
  
- Class: text
  Output: Faisons une fonction un peu plus utile.
    Reproduisons le résultat de la fonction mean() dans une fonction appelée 
    my_mean().
    Rappelez-vous que la moyenne est la somme de tous les nombres dans le 
    vecteur divisé par sa longueur.
    


- Class: script
  Output: Sauvegardez bien votre script avant de taper submit().
  AnswerTests: test_func2()
  Hint: Utilisew la fonction sum() pour trouver la somme de tous les vecteurs d'une fonction
    et la fonction length pour trouver la taille du vecteur.
  Script: my_mean.R
  
- Class: cmd_question
  Output: Testez maintenant votre fonction my_mean() en trouvant la moyenne de du vecteur c(4, 5, 10).
  CorrectAnswer: my_mean(c(4, 5, 10))
  AnswerTests: omnitest(correctExpr='my_mean(c(4, 5, 10))')
  Hint: Tapez my_mean(c(4, 5, 10)) pour tester votre nouvelle fonction.
  
- Class: text
  Output: Essayons maintenant d'écrire une fonction avec des arguments par défaut.
    Il est parfois utile de fixer une valeur par défaut pour des arguments d'une fonction.
    Par exemple si votre fonction va utiliser la même valeur très souvent.
    
- Class: script
  Output: Sauvegardez bien votre script avant de taper submit().
  AnswerTests: test_func3()
  Hint: N'oubliez pas de mettre les valeurs par défaut.
  Script: remainder.R
  
- Class: cmd_question
  Output: Testons un petit peu le comportement de la fonction remainder.
    Tapez remainder(5) et observez le résultat.
  CorrectAnswer: remainder(5)
  AnswerTests: omnitest(correctExpr='remainder(5)')
  Hint: Testons le comportement de la fonction remainder en tapant remainder(5).
  
- Class: text
  Output: Observons ce qu'il s'est passé.
    Vous avez passé un argument à la fonction.
    R a décidé que cette argument était 'num', puisque 'num' est le premier argument de la fonction.
    La valeur par défaut pour 'divisor' est 2, R a donc utilisé cette valeur dans le calcul.
    
- Class: cmd_question
  Output: Observons maintenant le comportement de remainder avec 2 arguments.
    Tapez remainder(11, 5) et observons le résultat.
  CorrectAnswer: remainder(11, 5)
  AnswerTests: omnitest(correctExpr='remainder(11, 5)')
  Hint: Tapez remainder(11, 5) et observer le résultat.
  
- Class: text
  Output: R a utilisé le premier argument pour 'num' et le deuxième pour 'divisor'.
    C'est bien le comportement attendu.

- Class: cmd_question
  Output: Il est aussi possible de spécifier explicitement les arguments avec leur nom.
    Quand vous procédez ainsi, l'ordre des arguments devient sans importance.
    Essayez en tapant remainder(divisor = 11, num = 5).
  CorrectAnswer: remainder(divisor = 11, num = 5)
  AnswerTests: omnitest(correctExpr='remainder(divisor = 11, num = 5)')
  Hint: L'ordre des arguments ne compte plus quand on les spécifie ! 
    Testez ce comportement en tapant remainder(divisor = 11, num = 5)
    
- Class: text
  Output: Il y a une grande différence entre remainder(11, 5) et remainder(divisor = 11, num = 5).
  
- Class: cmd_question
  Output: R peut aussi partiellement appairer valeurs et arguments.
    Tapez remainder(4, div = 2) et observer le résultat.
  CorrectAnswer: remainder(4, div = 2)
  AnswerTests: omnitest(correctExpr='remainder(4, div = 2)')
  Hint: Tapez remainder(4, div = 2).
  
- Class: text
  Output: Vous voulez en général faire en sorte que votre code soit lisible et compréhensible.
    Mélanger l'ordre des arguments en utilisant leur nom ou appairer seulement une partie
    des arguments n'est pas une bonne pratique.
    Faites-le avec parcimonie.
    
- Class: cmd_question
  Output: En parlant d'arguments, vous vous demandez peut-être comment on peut
    découvrir tous les arguments d'une fonction.
    Fort heureusement, R a une fonction pour ça, args().
    Utilisez args() pour connaître les arguments de remainder.
  CorrectAnswer: args(remainder)
  AnswerTests: omnitest(correctExpr='args(remainder)')
  Hint: Trouvez les arguments de remainder en tapant args(remainder).
  
- Class: text
  Output: Vous ne vous en êtes peut-être pas rendu compte, mais vous venez de 
    faire quelque chose d'intéressant.
    Vous avez utilisé comme argument d'une fonction une autre fonction !
    Et oui, il est possible d'utiliser comme argument d'une fonction une autre fonction.
    Ecrivons un petit script pour explorer cette possibilité.
    
- Class: script
  Output: Sauvegardez bien votre script avant de taper submit().
  AnswerTests: test_func4()
  Hint: Faites bien attention à ne pas mettre de parenthèses à la fonction que vous 
    utilisez comme argument.
  Script: evaluate.R
  
- Class: cmd_question
  Output: Utilisons maintenant votre fonction evaluate() pour trouver l'écart type
    du vecteur c(1.4, 3.6, 7.9, 8.8).
  CorrectAnswer: evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
  AnswerTests: omnitest(correctExpr='evaluate(sd, c(1.4, 3.6, 7.9, 8.8))')
  Hint: La fonction écart-type dans R est la fonction sd().
    N'oubliez pas que pour passer une fonction en argument il ne faut pas mettre
    de parenthèses à cette fonction.

- Class: text
  Output: "L'idée d'utiliser une fonction comme argument dans une autre fonction
    est un concept clé de programmation.
    Encore plus fort : il est possible de passer des fonctions en arguments dans
    une autre fonction sans avoir défini la fonction auparavant.
    Les fonctions de ce type sont appelées fonctions anonymes (ou lambda fonctions)."
    
- Class: text
  Output: Nous allons utiliser la fonction evaluate pour étudier le fonctionnement
    des fonctions anonymes.
    Comme premier argument à evaluate, nous allons écrire une petite fonction, 
    qui tient sur une ligne.
    Comme second argument à la fonction evaluate nous allons utiliser comme argument
    un tout petit ensemble de données.
    
- Class: cmd_question
  Output: "Tapez la commande suivante, nous allons voir par la suite comment 
    elle fonctionne : evaluate(function(x){x+1}, 6)"
  CorrectAnswer: evaluate(function(x){x+1}, 6)
  AnswerTests: test_eval1()
  Hint: Tapez simplement la commande evaluate(function(x){x+1}, 6)
  
- Class: text
  Output: Le premier argument d'evaluate est une fonction anonyme très simple qui
    prend comme argument 'x' et retourne 'x+1'. 
    Nous avons dit à evaluate de passer comme argument 6 à cette fonction, le résultat
    est donc 7.
    
- Class: cmd_question
  Output: Essayez d'utiliser evaluate() avec une fonction anonyme afin qu'elle
    retourne le premier élément d'un vecteur.
    Votre fonction anonyme devrait prendre un seul argument, qui devrait être
    la variable x.
    Le vecteur que vous devez utiliser pour tester cette fonction doit être 
    le vecteur c(8, 4, 0).
  CorrectAnswer: evaluate(function(x){x[1]}, c(8, 4, 0))
  AnswerTests: test_eval2()
  Hint: Rappelez vous comment on fait appel à un élément particulier dans un 
    vecteur à l'aide de son index. 
    Votre fonction anonyme ne doit avec qu'un seul argument et le nom de cette
    argument doit être x.

- Class: cmd_question
  Output: Utilisez maintenant la fonction evaluate() et une fonction anonyme
    afin de retourner le dernier élément d'un vecteur.
    Votre fonction anonyme ne doit avoir qu'un seul argument qui sera x.
    Le vecteur que vous devez utiliser pour tester cette fonction doit être 
    le vecteur c(8, 4, 0).
  CorrectAnswer: evaluate(function(x){x[length(x)]}, c(8, 4, 0))
  AnswerTests: test_eval3()
  Hint: Rappelez vous comment on fait appel à un élément particulier dans un 
    vecteur à l'aide de son index. 
    Votre fonction anonyme ne doit avec qu'un seul argument et le nom de cette
    argument doit être x.
    La fonction length() peut être utile dans votre fonctio anonyme.

- Class: cmd_question
  Output: Jusqu'à la fin de cette leçon nous allons utiliser la fonction paste()
    fréquemment.
    Tapez ?paste pour lire la documentation de cette fonction et comprendre
    son fonctionnement.
  CorrectAnswer: ?paste
  AnswerTests: omnitest(correctExpr='?paste')
  Hint: Tapez ?paste.
  
  
- Class: cmd_question
  Output: Afin de comprendre comment paste() fonctionne, essayez de taper
    paste("La", "programmation", "c'est", "facile !").
  CorrectAnswer: paste("La", "programmation", "c'est", "facile !")
  AnswerTests: omnitest(correctExpr='paste("La", "programmation", "c\'est", "facile !")')
  Hint: Tapez paste("La", "programmation", "c'est", "facile !").
  
- Class: text
  Output: Ecrivons maintenant notre propre version de paste().

- Class: script
  Output: Sauvegardez bien votre script avant de taper submit().
  AnswerTests: test_func5()
  Hint: N'oubliez pas que des arguments peuvent être donnés après ...
  Script: telegram.R

- Class: cmd_question
  Output: Essayons maintenant votre nouvelle fonction telegram().
    Utilisez votre fonction telegram() avec n'importe quels arguments.
  CorrectAnswer: telegram()
  AnswerTests: expr_uses_func('telegram')
  Hint: Utilisez votre fonction telegram() avec n'importe quels arguments.
  
- Class: cmd_question
  Output: Avant de continuer, nous devons faire un petit détour par les listes.
    Nous avons déjà vu les listes dans la leçon sur les types (mot clé `list`). 
    Une capacité que nous n'avons pas exploré ni exploité des listes jusqu'à présent
    et le fait qu'on puisse nommer les éléments des listes.
    Par exemple, on peut créer une liste contenant un vecteur poids et un vecteur tailles.
    tailles doit être un vecteur contenant les tailles 154, 175 et 165 (dant cet ordre).
    poids doit être un vecteur contenant les poids 55, 80 et 65 (dant cet ordre).
    On veut mettre ces deux vecteurs dans une liste.
    On tapera alors list(tailles = c(154, 175, 165), poids = c(55, 80, 65)).
    On souhaite assigner cette list à ma_liste.
  CorrectAnswer: ma_liste <- list(tailles = c(154, 175, 165), poids = c(55, 80, 65))
  AnswerTests: omnitest(correctExpr='ma_liste <- list(tailles = c(154, 175, 165), poids = c(55, 80, 65))')
  Hint: "Tapez : ma_liste <- list(tailles = c(154, 175, 165), poids = c(55, 80, 65))"
  
- Class: cmd_question
  Output: Observons maintenant ma_liste.
  CorrectAnswer: ma_liste
  AnswerTests: omnitest(correctExpr='ma_liste')
  Hint: "Tapez : ma_liste"

- Class: cmd_question
  Output: On peut accéder à un élément nommé d'une liste à l'aide de la syntaxe list$nom
    ou bien à l'aide de list[["nom"]], tout comme on a pu le faire pour des colonnes
    d'un data.frame.
    Essayez d'accéder à la colonne tailles de ma_list.
  CorrectAnswer: ma_liste$tailles
  AnswerTests: any_of_exprs('ma_liste$tailles', 'ma_liste[["tailles"]]')
  Hint: Faites bien attention à la syntaxe et demandez-vous comment s'appelle
    votre liste et quel est le nom de l'élément que vous souhaitez voir.
    

  
- Class: text
  Output: Fin de la parenthèse sur les listes. 
    Nous allons avoir besoin des listes pour le prochain exercices que nous utilisons.
    En effet, l'argument ... est considéré comme une liste par R.

- Class: script
  Output: Sauvegardez bien votre script avant de taper submit().
  AnswerTests: test_func6()
  Hint: Votre fonction doit contenir trois parties.
    Une capture des ... dans une liste.
    Le découpage des arguments des ... et l'assignation à une variable.
    Le passage des variables dans la fonction paste().
  Script: manif.R

- Class: cmd_question
  Output: Utilisons maintenant votre fonction manif.
    Pensez bien à nommer les arguments place, adjective et noun pour que votre
    fonction accomplisse son travail.
  CorrectAnswer: manif(adjective = "", place = "", noun = "")
  AnswerTests: expr_uses_func('manif')
  Hint: Utilisez la fonction manif et nommer bien vos arguments place, adjective
    et nom.
    
- Class: text
  Output: Nous avons fini cette leçon.
    Vous avez maintenant un des concepts les plus important de R et du monde de
    la programmation, les fonctions.
 
- Class: mult_question
  Output: Souhaitez-vous soumettre votre progression sur Moodle à votre 
    enseignant (cela ne fonctionnera que pour les étudiants de l'université 
    Paris 8) ?
    Si vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
    fichier 'Scripts_et_fonctions.txt' qui a été créé plus tard.
  AnswerChoices: Oui;Non
  CorrectAnswer: "Oui"
  AnswerTests: submit_log()
  Hint: Cela soumettra votre avancée dans le cours.
