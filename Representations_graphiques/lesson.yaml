- Class: meta
  Course: Initiation à R
  Lesson: Représentations graphiques
  Author: Elias Bouacida
  Type: Standard
  Organization: Université Paris 8
  Version: 2.4.5

- Class: text
  Output: Une des plus grandes forces de R par rapport à d'autres langages de 
    programmation est la facilité avec laquelle il est possible de créer des 
    graphiques de bonne qualité.
    Nous allons voir dans cette leçon les bases des représentations graphiques
    dans R.
    Nous allons pour ce faire utiliser la librairie ggplot2. 
    R contient une librairie graphique intégrée, mais celle-ci est relativement
    moins pratique et moins puissante que ggplot2.

- Class: cmd_question
  Output: Chargez la base de données déjà existante rp2018 dans R à l'aide de la commande
    data(rp2018).
  CorrectAnswer: data(rp2018)
  AnswerTests: omnitest(correctExpr='data(rp2018)')
  Hint: Tapez data(rp2018) pour charger les données dans R.
  
- Class: text
  Output: ggplot a une limitation sur les types de données qu'il prend en entrée.
    Elles doivent être sous forme de tableaux. 
    Les seuls tableaux que vous avez vu jusqu'à présent sont des dataframes.
    Le but de cette leçon est de vous introduire différents types de représentations
    graphiques et leurs arguments.
    Les données de sorties n'auront peut-être pas l'air très intéressante, mais 
    tout serait plus intéressant avec des données plus larges.
    
- Class: cmd_question
  Output: Affichez l'aide pour le rp2018, à l'aide de help ou ?.
  CorrectAnswer: ?rp2018
  AnswerTests: any_of_exprs('?rp2018', 'help(rp2018)')
  Hint: Tapez ?rp2018 ou help(rp2018) pour voir des détails sur le dataframe rp2018.
  
- Class: text
  Output: Vous pouvez voir que le dataframe à 62 variables et 5417 lignes.
    Nous allons seulement nous intéresser à un sous-ensemble de ces variables, 
    regroupé dans la base de donnée rp qui est déjà pré-entrée pour vous.
    
- Class: cmd_question
  Output: Utiliser head() sur rp pour voir les premières lignes des données.
  CorrectAnswer: head(rp)
  AnswerTests: omnitest(correctExpr='head(rp)')
  Hint: Tapez head(rp) pour voir les premières lignes des données.
  
- Class: text
  Output: C'est toujours une bonne idée d'avoir une petite idée des données avant
    de travailler dessus. 
    Quelques commandes R sont utiles pour cela, notamment dim(), names(), head(),
    tail() et summary().

- Class: cmd_question
  Output: Utilisez une des commandes précédentes (mais pas head()) pour voir ce 
    qu'elle donne.
  CorrectAnswer: summary(rp)
  AnswerTests: any_of_exprs('summary(rp)', 'dim(rp)', 'names(rp)', 'tail(rp)')
  Hint: Tapez summary(rp) pour voir un résumé de chacune des variables.
  

- Class: cmd_question
  Output: On va maintenant utiliser ggplot() pour afficher les données.
    Avant de l'utiliser, mieux vaut regarder comment l'utiliser.
    Tapez ?ggplot pour afficher l'aide sur ggplot.
  CorrectAnswer: ?ggplot
  AnswerTests: any_of_exprs('?ggplot', 'help(ggplot)')
  Hint: Tapez ?ggplot pour afficher l'aide sur ggplot.
  
- Class: cmd_question
  Output: "Pour utiliser ggplot sur rp, tapez les commandes suivantes :
    ggplot(rp)."
  CorrectAnswer: ggplot(rp)
  AnswerTests: omnitest(correctExpr='ggplot(rp)')
  Hint: Tapez ggplot(rp).
  
- Class: text
  Output: Rien ne se passe !
    Il manque en effet à R deux éléments.
    Comment nous souhaitons représenter les données.
    On utilise une géométrie pour cela (geom_xxx).
    Et quelle(s) variable(s) issue des données nous souhaitons représenter.
    Ces variables sont données par l'argument aes() dans geom_()
    
- Class: cmd_question
  Output: Le mot-clé essentiel pour spécifier comment est geom_ (geométrie).
    Si on veut par exemple représenter les données sous formes d'histogramme, 
    on doit utiliser geom_histogram().
    La syntaxe de ggplot() est telle que nous devons ajouter au graphique l'esthétique.
    Il faut taper ggplot(rp) + geom_histogram(aes(cadres)) pour afficher le graphique.
    Essayez.
  CorrectAnswer: ggplot(rp) + geom_histogram(aes(cadres))
  AnswerTests: omnitest(correctExpr='ggplot(rp) + geom_histogram(aes(cadres))')
  Hint: Tapez ggplot(rp) + geom_histogram(aes(cadres)) pour afficher le graphique.  
  
- Class: text
  Output: Remarquez que R a automatiquement donné des noms aux axes.
    Il utilise comme nom le nom des colonnes du tableau quand il y en a une. 
    Il trouve ensuite le terme le plus adapté.
    Il a aussi automatiquement créé des échelles avec des beaux nombres ronds sur les axes.
    
- Class: cmd_question
  Output: Essayez maintenant de représenter le même graphique non pas avec la variable
    cadre mais avec la variable ouvr. 
  CorrectAnswer: ggplot(rp) + geom_histogram(aes(ouvr))
  AnswerTests: omnitest(correctExpr='ggplot(rp) + geom_histogram(aes(ouvr))')
  Hint: Remplacez dans la question précédente cadres par ouvr.

- Class: cmd_question
  Output: "Représentons maintenant un nuage de point.
    La géométrie ne sera plus un histogram, mais un point : geom_histogram devient geom_point.
    Des points dans un graphique sont caractérisés par leur abscisse et leur ordonnée. 
    Il faut donc donner deux variables à aes() pour pouvoir représenter un nuage de point.
    Disons qu'en variable x on veut utiliser la proportion de diplomés du supérieur (dipl_sup)
    et qu'en variable y on veut utiliser la proportion de cadres.
    Essayez de modifier les commandes précédentes pour obtenir ce graphique."
  CorrectAnswer: ggplot(rp) + geom_point(aes(dipl_sup, cadres))
  AnswerTests: omnitest(correctExpr='ggplot(rp) + geom_point(aes(dipl_sup, cadres))')
  Hint: Il faut maintenant ajouter geom_point(aes(dipl_sup, cadres)) à ggplot().

- Class: cmd_question
  Output: Nous allons voir comment changer différents aspects du graphique.
    Si par exemple nous voulons changer la légende de l'axe des abscisse par diplomés du supérieur, il faut
    ajouter xlab('diplomés du supérieur') à nos commandes précédentes.
    Essayez pour voir.
  CorrectAnswer: ggplot(rp) + geom_point(aes(dipl_sup, cadres)) + xlab('diplomés du supérieur')
  AnswerTests: omnitest(correctExpr="ggplot(rp) + geom_point(aes(dipl_sup, cadres)) + xlab('diplomés du supérieur')")
  Hint: Tapez ggplot(rp) + geom_point(aes(dipl_sup, cadres)) + xlab('diplomés du supérieur') pour afficher le graphique.
    
- Class: text
  Output: On peut faire quelque chose de similaire à l'axe des ordonnées à l'aide de ylab.
    
- Class: cmd_question
  Output: On peut modifier certains attributs graphiques d'une geom en utilisant des 
    arguments supplémentaires.
    On peut utiliser color pour modifier la couleur, size pour modifier la taille
    et alpha pour modifier la transparence.
    Essayez de taper ggplot(rp) +  geom_point(aes(x = dipl_sup, y = cadres), color = "red", size = 2, alpha = 0.3)
    et observez le résultat.
  CorrectAnswer: ggplot(rp) +  geom_point(aes(x = dipl_sup, y = cadres), color = "red", size = 2, alpha = 0.3)
  AnswerTests: omnitest(correctExpr="ggplot(rp) +  geom_point(aes(x = dipl_sup, y = cadres), color = 'red', size = 2, alpha = 0.3)")
  Hint: Tapez ggplot(rp) +  geom_point(aes(x = dipl_sup, y = cadres), color = "red", size = 2, alpha = 0.3) pour afficher le graphique.
    

- Class: mult_question
  Output: Souhaitez-vous soumettre votre progression sur Moodle à votre 
    enseignant (cela ne fonctionnera que pour les étudiants de l'université 
    Paris 8) ?
    Si vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
    fichier 'Representations_graphiques.txt' qui a été créé plus tard.
  AnswerChoices: Oui;Non
  CorrectAnswer: "Oui"
  AnswerTests: submit_log()
  Hint: Cela soumettra votre avancée dans le cours.
