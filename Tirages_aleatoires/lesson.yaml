- Class: meta
  Course: Initiation à R
  Lesson: Tirages aléatoires
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.5

- Class: text
  Output: Un avantage d'utiliser R, un langage de programmation statistique
    est la grande quantité d'outils à votre disposition
    pour effectuer des simulations et générer des nombres aléatoires.
  

- Class: text
  Output: Je ne vous expliquerai pas les différentes distributions de probabilités,
    mais vous les avez normalement déjà vu. 
    Ici, mous allons simplement les utiliser pour l'échantillonage et la génération
    de nombres aléatoires. 
    
  
- Class: cmd_question
  Output: La première fonction que nous allons utiliser pour générer des nombres
    aléatoires est sample().
    Regardez l'aide sur cette fonction grâce à ?sample.
  CorrectAnswer: ?sample
  AnswerTests: omnitest(correctExpr='?sample')
  Hint: Regardez l'aide sur la fonction sample() grâce à ?sample.

- Class: cmd_question
  Output: "Essayons de simuler 4 lancements d'un dé à 6 faces : sample(1:6, 4, replace = TRUE)."
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Tapez sample(1:6, 4, replace = TRUE) dans la console pour simuler 4
    lancements d'un dé.

- Class: cmd_question
  Output: Répetez la commande et observez que les résultats sont différents.
   (La probabilité d'obtenir exactement le même résultat est (1/6)^4 = 0.00077 !)
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: Tapez sample(1:6, 4, replace = TRUE) dans la console pour simuler 4
    lancements d'un dé encore une fois.

- Class: text
  Output: sample(1:6, 4, replace = TRUE) dit à R de tirer aléatoirement 4 fois 
    un nombre entre 1 et 6, AVEC remise.
    Le tirage avec remise signifie que le nombre est "remis" à chaque fois, donc
    il a encore la même chance d'être sélectionné la fois suivante.
    C'est bien ce que nous souhaitons obtenir ici, puisque chaque lancé de dé 
    n'affecte pas le suivant.

- Class: cmd_question
  Output: Tirez maintenant aléatoire 10 nombres entre 1 et 20, SANS remise.
    Pour ce faire, enlever simplement l'argument 'replace' de la fonction.
  CorrectAnswer: sample(1:20, 10)
  AnswerTests: match_call('sample(1:20, 10)')
  Hint: Tapez sample(1:20, 10) pour tirer aléatoirement 10 nombres entre 1 et 20, sans remise.

- Class: text
  Output: La commande précédente précise qu'il n'y a pas de remise chaque nombre
    de la séquence ne peut donc apparaître qu'une seule fois.

- Class: cmd_question
  Output: LETTERS est un objet prédéfini dans R qui contient les 26 lettres de 
    l'alphabet latin en majuscule.
    Regardez son contenu maintenant.
  CorrectAnswer: LETTERS
  AnswerTests: omnitest(correctExpr='LETTERS')
  Hint: Tapez LETTERS dans la console pour observer son contenu.

- Class: cmd_question
  Output: La fonction sample() permet aussi de permuter les éléments d'un vecteurs.
    Par exemple, essayez sample(LETTERS) pour permuter les 26 lettres de l'alphabet.
  CorrectAnswer: sample(LETTERS)
  AnswerTests: omnitest(correctExpr='sample(LETTERS)')
  Hint: Tapez sample(LETTERS) pour permuter les lettres de l'alphabet.

- Class: text
  Output: La permutation est exactement comme tirer aléatoirement les 26 LETTERS
    sans remise. 
    Quand l'argument 'size' n'est pas spécifié dans sample(), R utilise un échantillon
    de la taille du vecteur utilisé pour échantillonner.

- Class: text
  Output: Supposons maintenant que nous souhaitons simuler le tirage aléatoire de 
    100 pile ou face d'une pièce biaisée. 
    Cette pièce à une probabilité de 0.3 d'obtenir pile et une probabilité 
    0.7 d'obtenir face.

- Class: cmd_question
  Output: Supposons que 0 représnte pile et 1 représente face.
    Utilisez sample() pour tirer aléatoirement un échantillon de taille 100 du 
    vecteur c(0, 1), avec remise.
    Pour préciser que la pièce est biaisée, on doit ajouter un argument prob = c(0.3, 0.7)
    à la fonction. Celui-ci donne les probabilités de chaque valeur.
    Assignez le résultat à un nouvel objet appelé flips.
  CorrectAnswer: flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
  AnswerTests: match_call('flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))')
  Hint: 'Tapez ceci pour obtenir le résultat demandé : flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))'

- Class: cmd_question
  Output: Regardez le contenu de flips.
  CorrectAnswer: flips
  AnswerTests: omnitest(correctExpr='flips')
  Hint: Tapez flips pour voir le contenu.

- Class: cmd_question
  Output: Nous avons mis une probabilité de 0.7 sur face. 
   On s'attend donc à trouver à peu près 70 tirages qui valent 1.
   Comptez le nombre total de 1 en utilisant la fonction sum().
  CorrectAnswer: sum(flips)
  AnswerTests: omnitest(correctExpr='sum(flips)')
  Hint: sum(flips) ajoute toutes les valeurs dans le vecteur flips, donc comptez le nombre de 1.
  
- Class: cmd_question
  Output: Un tirage à pile ou face à un résultat binaire (0 ou 1) et nous faisons
    100 tirages indépendants. 
    On peut donc utiliser la fonction rbinom() pour simuler des tirages d'une variable aléatoire binomiale.
    Regardez la documentation de rbinom() en utilisant ?rbinom.
  CorrectAnswer: ?rbinom
  AnswerTests: omnitest(correctExpr='?rbinom')
  Hint: Tapez ?rbinom pour lire l'aide sur la fonction binom().

- Class: text
  Output: Chaque distribution de probabilité dans R a une fonction r**** (r pour 'random'),
    une fonction d**** (d pour 'densité'),
    une fonction p**** (p pour 'probabilité')
    et une fonction q**** (q pour 'quantile').
    Nous allons principalement utilisé les fonctions r**** ici.

- Class: cmd_question
  Output: Une variable aléatoire binomiale représente le nombre de succès (face) 
    pour un nombre donné d'essai indépendant (tirage à pile ou face).
    On peut donc générer une variable aléatoire unique qui représente le tirage
    à pile ou face de notre pièce biaisée en utilisant rbinom(1, size = 100, prob = 0.7). 
    Nous n'avons besoin ici que de spécifié la probabilité de succès (face), 
    pas la probabilité d'échec (pile).
    Essayez.
  CorrectAnswer: rbinom(1, size = 100, prob = 0.7)
  AnswerTests: match_call('rbinom(1, size = 100, prob = 0.7)')
  Hint: Utilisez rbinom() avec n = 1, size = 100 et prob = 0.7.

- Class: cmd_question
  Output: De manière équivalente, si nous voulons voir tous les 0 et 1, on peut
    demander 100 observations, chacune de taille 1 et avec une probabilité de
    succès de 0,7.
    Essayez en assignant le résultat à un nouvel objet flips2.
  CorrectAnswer: flips2 <- rbinom(100, size = 1, prob = 0.7)
  AnswerTests: match_call('flips2 <- rbinom(100, size = 1, prob = 0.7)')
  Hint: Utilisez rbinom() avec n = 100, size = 1 et prob = 0.7 et assignez le
    résultat à flips2.

- Class: cmd_question
  Output: Observez le contenu de flips2.
  CorrectAnswer: flips2
  AnswerTests: omnitest('flips2')
  Hint: Tapez flips2 pour observer son contenu.

- Class: cmd_question
  Output: Utilisez maintenant sum() pour compter le nombre de 1 (face) dans flips2.
    Elle devrait être proche de 70.
  CorrectAnswer: sum(flips2)
  AnswerTests: omnitest('sum(flips2)')
  Hint: Utilisez sum(flips2) pour compter le nombre de 1.

- Class: cmd_question
  Output: Tout comme rbinom(), on peut utiliser R pour simuler le résultat de 
    beaucoup d'autres distributions.
    Cherchez la documentation pour rnorm.
  CorrectAnswer: ?rnorm
  AnswerTests: omnitest('?rnorm')
  Hint: Tapez ?rnorm pour lire son aide.

- Class: cmd_question
  Output: La distribution normale classique à une moyenne de 0 et un écart-type de 1.
    Comme vous pouvez le lire dans la partie 'Usage' de la documentation, les 
    valeurs par défaut des arguments 'mean' (moyenne) et 'sd' (écart-type) sont 0 et 1.
    rnorm(10) générera donc 10 nombres aléatoires à l'aide de la distribution
    nornale classique.
  CorrectAnswer: rnorm(10)
  AnswerTests: omnitest('rnorm(10)')
  Hint: Utilisez rnorm(10) pour générer 10 nombres aléatoires issus d'une distribution Gaussienne.

- Class: cmd_question
  Output: Faites maintenant la même chose avec une moyenne de 100 et un écart-type de 25.
  CorrectAnswer: rnorm(10, 100, 25)
  AnswerTests: match_call('rnorm(10, 100, 25)')
  Hint: Utilisez rnorm(10, mean = 100, sd = 25) pour générer 10 nombres aléatoires
    tiré d'une loi normale de moyenne 100 et d'écart-type 25.

- Class: text
  Output: Enfin, nous voulons générer 100 groupes de nombres aléatoires.
    Chaque groupe contiendra 5 valeurs générées par une loi uniforme entre -1 et 1.
    Commençons par un premier groupe de 5 nombre.
    Je vous expliquerait par la suite comment répéter facilement l'opération 100 fois.

- Class: cmd_question
  Output: Générer 5 valeurs aléatoires issues d'une distribution uniforme sur -1, 1.
    Utilisez la documentation de runif() si vous avez besoin d'aide.
  CorrectAnswer: runif(5, -1, 1)
  AnswerTests: match_call('runif(5, -1, 1)')
  Hint: Utilisez  runif(5, min=-1, max=1) pour générer 5 valeurs issues d'une loi uniforme sur -1, 1.

- Class: cmd_question
  Output: Utilisez maintenant replicate(100, runif(5, -1, 1)) pour répéter l'opération 100 fois. 
    Stockez le résultat dans une nouvelle variable mon_unif.
  CorrectAnswer: mon_unif <- replicate(100, runif(5, -1, 1))
  AnswerTests: match_call('mon_unif <- replicate(100, runif(5, -1, 1))')
  Hint: mon_unif <- replicate(100, runif(5, -1, 1)) répétera le résultat 100 et stockera le résultat.

- Class: cmd_question
  Output: Regardez le contenu de mon_unif.
  CorrectAnswer: mon_unif
  AnswerTests: omnitest('mon_unif')
  Hint: Affichez le contenu de mon_unif sur la console.

- Class: cmd_question
  Output: replicate() a créer une matrice, chaque colonne contient 5 nombre aléatoire
    issus de la distribution spécifiée.
    Nous pouvons trouvez maintenant trouver la moyenne dans chaque colonne à l'aide de colMeans().
    Stockez le résultat dans l'objet cm.
  CorrectAnswer: cm <- colMeans(mon_unif)
  AnswerTests: omnitest('cm <- colMeans(mon_unif)')
  Hint: Utilisez cm <- colMeans(mon_unif) pour créer le vecteur contenant les moyennes par colonnes et stocker le résultat.

- Class: cmd_question
  Output: Regardons l'histogramme du résultat à l'aide de ggplot(data.frame(cm = cm)) + geom_histogram(aes(cm))
  CorrectAnswer: ggplot(data.frame(cm = cm)) + geom_histogram(aes(cm))
  AnswerTests: omnitest('ggplot(data.frame(cm = cm)) + geom_histogram(aes(cm))')
  Hint: ggplot(data.frame(cm = cm)) + geom_histogram(aes(cm)) affichera l'histogramme demandé.

- Class: text
  Output: Nos valeurs moyennes semblent presque suivre une distribution normale.
    C'est le théorème centrale limite, que vous n'avez peut-être pas vu.

- Class: text
  Output: Toutes les distributions aléatoires classiques sont incluses dans R,
    y compris exponentielle (rexp()), chi-deux (rchisq()), gamma (rgamma()), ...

- Class: text
  Output: Vous avez maintenant les bases des tirages aléatoires, mais le champs est bien
    évidemment bien plus étendu.

- Class: mult_question
  Output: Souhaitez-vous soumettre votre progression sur Moodle à votre 
    enseignant (cela ne fonctionnera que pour les étudiants de l'université 
    Paris 8) ?
    Si vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
    fichier 'Vecteurs_numeriques.txt' qui a été créé plus tard.
  AnswerChoices: Oui;Non
  CorrectAnswer: "Oui"
  AnswerTests: submit_log()
  Hint: Cela soumettra votre avancée dans le cours.
