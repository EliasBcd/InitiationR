- Class: meta
  Course: Introduction à R
  Lesson: Types
  Author: Elias Bouacida
  Type: Standard
  Organization: Université Paris 8
  Version: 2.4.5

- Class: text
  Output: Nous avons pour l'instant utilisé un seul type de valeurs, les valeurs
    numériques.
    Il en existe en fait d'autres.
    Pour en donner quelques-uns des plus importants, on a dans R les booléens, 
    les caractères, les vecteurs, les listes et les data.frames.
    Il y en a pleins d'autres.

- Class: cmd_question
  Output: Les booléens sont simples, il y a deux valeurs possibles, TRUE et 
    FALSE (abrégé parfois en T et F).
    Ils nous servirons beaucoup plus tard, pour l'instant, tapez simplement T.
  CorrectAnswer: T
  AnswerTests: omnitest(correctExpr='T')
  Hint: Tapez T (et non pas TRUE)
  
- Class: cmd_question
  Output: Les booléens sont généralement le résultat d'une comparaison.
    Essayez de taper 3>2
  CorrectAnswer: 3>2
  AnswerTests: omnitest(correctExpr='3>2')
  Hint: Tapez 3>2
  
- Class: text
  Output: On obtient TRUE !

- Class: mult_question
  Output: "Si on tape 3 < 2, que devrait-on obtenir ?"
  AnswerChoices: TRUE; FALSE
  CorrectAnswer: FALSE
  AnswerTests: omnitest(correctVal="FALSE")
  Hint: Si ce n'est l'un, c'est l'autre !

- Class: cmd_question
  Output: Un autre type de valeur important sont les caractères.
    Les chaînes de caractères sont entre guillemets \" ou '.
    Assigner le nom du cours à l'objet nom.
  CorrectAnswer: nom <- 'Introduction à R'
  AnswerTests: omnitest()
  Hint: Taper nom <- "Introduction à R"

- Class: text
  Output: "Nous aurons une leçon dédiée au -- chaîne de -- caractères."


  
- Class: cmd_question
  Output: Imaginons qu'on a demandé la taille en centimètres de 5 personnes et
    qu'on souhaite calculer leur taille moyenne.
    On pourrait créer autant d'objets que de tailles et calculer la moyenne.
    Commençons par assigner 156 à taille1.
  CorrectAnswer: taille1 <- 156
  AnswerTests: omnitest(correctExpr = 'taille1 <- 156')
  Hint: Tapez taille1 <- 156
  
- Class: cmd_question
  Output: Puis 164 à taille2.
  CorrectAnswer: taille2 <- 164
  AnswerTests: omnitest(correctExpr = 'taille2 <- 164')
  Hint: Tapez taille2 <- 164
  
- Class: cmd_question
  Output: Puis 197 à taille3.
  CorrectAnswer: taille3 <- 197
  AnswerTests: omnitest(correctExp = 'taille3 <- 197')
  Hint: Tapez taille3 <- 197

- Class: cmd_question
  Output: Nous pouvons alors calculer la moyenne en divisant la somme de ces 
    3 tailles par 3. 
    Essayez.
  CorrectAnswer: (taille1 + taille2 + taille3) / 3
  AnswerTests: omnitest(correctExpr = '(taille1 + taille2 + taille3) / 3')
  Hint: "Tapez (taille1 + taille2 + taille3) / 3"
  
- Class: text
  Output: Ce n'est guère pratique !
    R a un type dédié qui facilite grandement ces calculs, les vecteurs.
    C'est une collection de valeurs (des nombres). 
    Tout objet dans R qui contient une donnée est appelé une structure de donnée.
    Les vecteurs numériques sont les structures de données les plus simple.
    En fait, même un nombre seul est considéré comme un vecteur de longueur 1.

- Class: cmd_question
  Output: La façon la plus simple de créer un vecteur est d'utiliser la commande
    c(), qui signifie 'concatenate' ou 'combine' (assembler en anglais).
    Pour créer un vecteur contenant les tailles précédentes, tapez 
    c(156, 164, 197).
    Essayez et stockez le résultat dans l'objet tailles.
  CorrectAnswer: tailles <- c(156, 164, 197)
  AnswerTests: omnitest(correctExpr =  'tailles <- c(156, 164, 197)')
  Hint: Tapez tailles <- c(156, 164, 197) et appuyez sur entrée.
    Cela assigne le vecteur (156, 164, 197) au nouvel objet tailles. 
    Les espaces après la virgule ne sont pas nécessaire mais rendent le code plus
    lisible.

- Class: cmd_question
  Output: Si vous avez une question sur une commande particulière de R, vous 
    pouvez accéder à l'aide intégrée à R à l'aide de la commande `?` suivi de la
    commande.
    Par exemple, si vous voulez obtenir des informations sur la commande c(), 
    tapez ?c sans les parenthèses.
    Essayez !
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Tapez ?c et appuyez sur Entrée. 
    L'aide pour la commande c() s'affichera (en bas à droite dans Rstudio
    normalement)

- Class: cmd_question
  Output: Un type d'objet en apparence similaire aux vecteurs est la liste.
    Une caractéristique que nous n'avons pas encore abordé des vecteurs est 
    qu'ils contiennent des objets de même type.
    Une liste, au contraire, peut contenir des valeurs de types différent.
    Une liste est créée grâce à la commande list().
    Essayez de construire une liste contenant les éléments "R", TRUE et 8 (dans
    cet ordre).
    Appelez-là l.
  CorrectAnswer: l <- list("R", TRUE, 8)
  AnswerTests: omnitest(correctExpr = 'l <- list("R", TRUE, 8)')
  Hint: Tapez l <- list("R", TRUE, 8)
  
- Class: cmd_question
  Output: Regardons maintenant ce que contient l.
  CorrectAnswer: l
  AnswerTests: omnitest(correctExpr = 'l')
  Hint: Rappelez-vous qu'il suffit de taper un objet pour l'afficher.
  
- Class: text
  Output: Analysons un petit peu ce que nous renvoit R.
    La présence de double crochet `[[]]`  nous indique que nous sommes en présence
    d'une liste.
    Chaque élément de la liste conserve son type.
  
- Class: cmd_question
  Output: Essayons la même chose avec un vecteur.
    Nommez-le v.
  CorrectAnswer: v <- c("R", TRUE, 8)
  AnswerTests: omnitest(correctExpr = 'v <- c("R", TRUE, 8)')
  Hint: Tapez v <- c("R", TRUE, 8)  

- Class: cmd_question
  Output: Regardons maintenant ce que contient v.
  CorrectAnswer: v
  AnswerTests: omnitest(correctExpr = 'v')
  Hint: Rappelez-vous qu'il suffit de taper un objet pour l'afficher.
  
- Class: cmd_question
  Output: Il n'y a pas de double crochets, nous sommes bien face à un vecteur.
    Le type des objets, en revanche, a changé. 
    Pour vous en convaincre, utilisez la commande str(), qui nous renseigne sur
    la structure d'un objet, sur l'objet v.
  CorrectAnswer: str(v)
  AnswerTests:  omnitest(correctExpr = 'str(v)')
  Hint: Tapez str(v).
  
- Class: cmd_question
  Output: Faites la même chose sur l.
  CorrectAnswer: str(l)
  AnswerTests:  omnitest(correctExpr = 'str(l)')
  Hint: Tapez str(l).
  
  
- Class: mult_question
  Output: Souhaitez-vous soumettre votre progression sur Moodle à votre 
    enseignant (cela ne fonctionnera que pour les étudiants de l'université 
    Paris 8) ?
    Si vous ne le faites pas maintenant, vous pourrez toujours lui envoyer le
    fichier 'Simples.csv' qui a été créé plus tard.
  AnswerChoices: Oui;Non
  CorrectAnswer: "Oui"
  AnswerTests: submit_log()
  Hint: Cela soumettra votre avancée dans le cours.
